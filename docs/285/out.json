[
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "writer#3 - writer#3",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "writer#3 = 0",
				"location": {
					"file": "",
					"class": "com.mapr.synth.Synth$ReportingWorker",
					"method": "generateFile",
					"line": 281
				},
				"stackTrace": [{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "call",
	"line": 223
},{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "generateFile",
	"line": 281
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "writer#3 = 0",
				"location": {
					"file": "",
					"class": "com.mapr.synth.Synth$ReportingWorker",
					"method": "generateFile",
					"line": 281
				},
				"stackTrace": [{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "call",
	"line": 223
},{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "generateFile",
	"line": 281
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "PrintWriter.<java.io.PrintWriter: java.io.Writer out> - PrintWriter.<java.io.PrintWriter: java.io.Writer out>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "PrintWriter.<java.io.PrintWriter: java.io.Writer out> = null",
				"location": {
					"file": "",
					"class": "java.io.PrintWriter",
					"method": "<init>",
					"line": -1
				},
				"stackTrace": [{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "call",
	"line": 247
},{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "generateFile",
	"line": 275
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "PrintWriter.<java.io.PrintWriter: java.io.Writer out> = null",
				"location": {
					"file": "",
					"class": "java.io.PrintWriter",
					"method": "<init>",
					"line": -1
				},
				"stackTrace": [{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "call",
	"line": 247
},{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "generateFile",
	"line": 275
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "<java.lang.Integer: int[] sizeTable> - <java.lang.Integer: int[] sizeTable>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "<java.lang.Integer: int[] sizeTable> = $stack4",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<clinit>",
					"line": 467
				},
				"stackTrace": [{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "call",
	"line": 223
},{
	"class": "java.lang.Integer",
	"method": "<clinit>",
	"line": 467
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "<java.lang.Integer: int[] sizeTable> = $stack4",
				"location": {
					"file": "",
					"class": "java.lang.Integer",
					"method": "<clinit>",
					"line": 467
				},
				"stackTrace": [{
	"class": "com.mapr.synth.Synth$ReportingWorker",
	"method": "call",
	"line": 223
},{
	"class": "java.lang.Integer",
	"method": "<clinit>",
	"line": 467
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack15 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 == 0 goto return r",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1882"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>(), 1882)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "376"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack8",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "377"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, e = $stack8, 377)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke e.<freemarker.template.TemplateException: void printStackTrace()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "378"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke e.<freemarker.template.TemplateException: void printStackTrace()>(), 378)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.ObjectMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1879"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>(), 1879)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10), 1888)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto return",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if dataModel != null goto wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "354"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nc := @parameter0: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "30"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)","(<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc), 30)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1889"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>(), 1889)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1879"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>(), 1879)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack7)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1884"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack8 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack7), 1884)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1884"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "298"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "376"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nc := @parameter0: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "30"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)","(<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc), 30)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack9",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "502"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, e = $stack9, 502)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack7)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1884"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack8 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack7), 1884)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1884"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.FieldSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.FieldSampler: boolean flattener>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ContainerNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)","(<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>, $stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>, 76)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: int _xmlGeneratorFeatures>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack7 = this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: int _xmlGeneratorFeatures>, 506)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2), 506)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$220689838 = new com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted '), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.'), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>(), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "86"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack11 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>, 86)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "fx = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "86"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, fx = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 86)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>(), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "fieldName = (java.lang.String) $stack17",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, fieldName = (java.lang.String) $stack17, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ContainerNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)","(<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>, $stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>, 76)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack81 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack81 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "355"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper), 355)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) dataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "348"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) dataModel, 348)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1882"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>(), 1882)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>, 309)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter1: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, $stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto $stack10 = newarray (java.lang.Object)[0]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.node.NullNode: com.fasterxml.jackson.databind.node.NullNode getInstance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "107"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)","(<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>, $stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 76)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "107"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if dataModel != null goto wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "354"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "640"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.ObjectMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1879"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>(), 1879)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1881"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5), 1881)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto $stack7 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature CLOSE_CLOSEABLE>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1881"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "59"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19, 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = dataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack6 = dataModel instanceof freemarker.template.TemplateHashModel, 347)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "310"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack9",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "502"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, e = $stack9, 502)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1882"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>(), 1882)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = <com.mapr.synth.Synth$ReportingWorker: javax.xml.stream.XMLStreamWriter sw>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "308"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack4.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>('\n'), 308)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack4.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>('\n')",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "308"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack4.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>('\n'), 308)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "307"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "59"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19, 96)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack9",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "502"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, e = $stack9, 502)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "nc := @parameter0: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "30"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)","(<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc), 30)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wrappedDataModel != null goto $stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return r",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "301"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "i = 0",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "277"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, i = i + 1, 277)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= count goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "277"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1889"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>(), 1889)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$220689838 = new com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1889"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>(), 1889)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) dataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "348"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) dataModel, 348)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.FieldSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.FieldSampler: boolean flattener>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack12 = value instanceof java.io.Closeable",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack12 = value instanceof java.io.Closeable, 1892)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19, 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "295"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "298"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1889"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>(), 1889)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16[1] = $stack21",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "325"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s%s', $stack16), 325)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s%s', $stack16)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "325"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s%s', $stack16), 325)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$220689838 = new com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return tmp$220689838",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = dataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack6 = dataModel instanceof freemarker.template.TemplateHashModel, 347)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack81 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack81 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if template == null goto writer#3 = 0",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "274"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter1: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, $stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto $stack10 = newarray (java.lang.Object)[0]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack50 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.Synth$Options opts>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack50 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.Synth$Options opts>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "opts := @parameter0: com.mapr.synth.Synth$Options",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "quoteConvention := @parameter1: com.mapr.synth.Synth$Quote",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "298"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.ObjectMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1879"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>(), 1879)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack7)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1884"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack8 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack7), 1884)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1884"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "301"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack11 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>(), 365)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "640"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack12 = virtualinvoke $stack11.<java.lang.Class: java.lang.String getName()>(), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "364"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack10.<java.lang.StringBuffer: void <init>()>(), 364)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack10.<java.lang.StringBuffer: void <init>()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "364"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack10.<java.lang.StringBuffer: void <init>()>(), 364)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.FieldSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.FieldSampler: boolean flattener>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x2 := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "59"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fieldName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "quoteConvention := @parameter1: com.mapr.synth.Synth$Quote",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "295"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$220689838 = new com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: int _xmlGeneratorFeatures>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack7 = this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: int _xmlGeneratorFeatures>, 506)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2), 506)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "59"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <com.fasterxml.jackson.databind.util.EmptyIterator: com.fasterxml.jackson.databind.util.EmptyIterator instance>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.util.EmptyIterator",
  "method": "<com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>",
  "line": "17"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)","(<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>, $stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>(), 177)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack0",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.util.EmptyIterator",
  "method": "<com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>",
  "line": "17"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19, 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.node.NullNode: com.fasterxml.jackson.databind.node.NullNode getInstance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "107"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)","(<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>, $stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 76)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "sw#2 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: javax.xml.stream.XMLStreamWriter _initializeXmlWriter(javax.xml.stream.XMLStreamWriter)>(sw)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "501"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, sw#2 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: javax.xml.stream.XMLStreamWriter _initializeXmlWriter(javax.xml.stream.XMLStreamWriter)>(sw), 501)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2), 506)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = <freemarker.core.Environment: java.lang.ThreadLocal threadEnv>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack80 = <java.lang.System: java.io.PrintStream out>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter3: java.io.PrintStream",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter4: java.io.PrintStream",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s\n', $stack8)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "292"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s\n', $stack8), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack7 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature CLOSE_CLOSEABLE>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1884"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack8 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack7), 1884)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "f := @parameter0: com.fasterxml.jackson.databind.SerializationFeature",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationConfig",
  "method": "<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5), 1881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.SerializationFeature",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationFeature",
  "method": "<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, virtualinvoke $stack73.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>($stack72), 239)","(<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>, $stack3 = virtualinvoke $stack2.<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>(f), 1512)","(<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>, $stack4 = virtualinvoke feature.<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>(), 332)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<com.fasterxml.jackson.databind.SerializationFeature: int ordinal()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationFeature",
  "method": "<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>",
  "line": "377"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, virtualinvoke $stack73.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>($stack72), 239)","(<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>, $stack3 = virtualinvoke $stack2.<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>(f), 1512)","(<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>, $stack4 = virtualinvoke feature.<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>(), 332)","(<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>, $stack2 = virtualinvoke this.<com.fasterxml.jackson.databind.SerializationFeature: int ordinal()>(), 377)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack81 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack81 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "640"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "640"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack25)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack26 = virtualinvoke $stack23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack25), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted '), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.'), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>(), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer#3 = writer#3 + 1",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "281"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer#3 = writer#3 + 1, 281)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if writer#3 >= count goto return count",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "281"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "376"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = value instanceof java.io.Closeable",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack12 = value instanceof java.io.Closeable, 1892)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) dataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "348"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) dataModel, 348)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack5",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, e = $stack5, 309)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack6.<java.io.IOException: void <init>(java.lang.Throwable)>(e)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "310"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, specialinvoke $stack6.<java.io.IOException: void <init>(java.lang.Throwable)>(e), 310)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.FieldSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.FieldSampler: boolean flattener>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "355"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper), 355)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "310"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "59"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config), 1887)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.util.LinkedHashMap",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "31"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)","(<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke $stack2.<java.util.LinkedHashMap: void <init>()>(), 31)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.util.LinkedHashMap: void <init>()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "31"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)","(<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke $stack2.<java.util.LinkedHashMap: void <init>()>(), 31)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <com.fasterxml.jackson.databind.util.EmptyIterator: com.fasterxml.jackson.databind.util.EmptyIterator instance>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.util.EmptyIterator",
  "method": "<com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>",
  "line": "17"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)","(<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>, $stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>(), 177)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter1: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, $stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto $stack10 = newarray (java.lang.Object)[0]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if template == null goto writer#3 = 0",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "274"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "310"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ContainerNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)","(<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc), 30)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.node.BaseJsonNode: void <init>()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "26"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke this.<com.fasterxml.jackson.databind.node.BaseJsonNode: void <init>()>(), 26)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>, 309)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, $stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto $stack10 = newarray (java.lang.Object)[0]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack9",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "502"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, e = $stack9, 502)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1889"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>(), 1889)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1882"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>(), 1882)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "359"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel, 359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wrappedDataModel != null goto $stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wrappedDataModel != null goto $stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "640"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack25)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack26 = virtualinvoke $stack23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack25), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted '), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.'), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>(), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack79 = this.<com.mapr.synth.Synth$ReportingWorker: int localCount>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack79 = this.<com.mapr.synth.Synth$ReportingWorker: int localCount>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count := @parameter4: int",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return count",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "286"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted '), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.'), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>(), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "376"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ContainerNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)","(<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>, $stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>, 76)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fieldName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 96)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19, 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "359"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel, 359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return r",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1879"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>(), 1879)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1881"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5), 1881)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto $stack7 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature CLOSE_CLOSEABLE>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1881"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: int _xmlGeneratorFeatures>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack7 = this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: int _xmlGeneratorFeatures>, 506)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2), 506)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "364"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack21), 365)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack21)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack21), 365)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack79 = this.<com.mapr.synth.Synth$ReportingWorker: int localCount>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack79 = this.<com.mapr.synth.Synth$ReportingWorker: int localCount>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count := @parameter4: int",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if i >= count goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "277"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = newarray (java.lang.Object)[1]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "292"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s\n', $stack8), 292)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s\n', $stack8)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "292"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s\n', $stack8), 292)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1879"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>(), 1879)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature FLUSH_AFTER_WRITE_VALUE>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10), 1888)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "f := @parameter0: com.fasterxml.jackson.databind.SerializationFeature",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationConfig",
  "method": "<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5), 1881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.SerializationFeature",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationFeature",
  "method": "<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, virtualinvoke $stack73.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>($stack72), 239)","(<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>, $stack3 = virtualinvoke $stack2.<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>(f), 1512)","(<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>, $stack4 = virtualinvoke feature.<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>(), 332)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<com.fasterxml.jackson.databind.SerializationFeature: int ordinal()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationFeature",
  "method": "<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>",
  "line": "377"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, virtualinvoke $stack73.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>($stack72), 239)","(<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>, $stack3 = virtualinvoke $stack2.<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>(f), 1512)","(<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>, $stack4 = virtualinvoke feature.<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>(), 332)","(<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>, $stack2 = virtualinvoke this.<com.fasterxml.jackson.databind.SerializationFeature: int ordinal()>(), 377)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "295"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wrappedDataModel != null goto $stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = newarray (java.lang.Object)[0]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "330"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('\n', $stack10), 330)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('\n', $stack10)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "330"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('\n', $stack10), 330)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "364"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack10.<java.lang.StringBuffer: void <init>()>(), 364)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack10.<java.lang.StringBuffer: void <init>()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "364"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack10.<java.lang.StringBuffer: void <init>()>(), 364)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter1: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, l6 = interfaceinvoke names.<java.util.List: java.util.Iterator iterator()>(), 316)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, $stack9 = interfaceinvoke l6.<java.util.Iterator: boolean hasNext()>(), 316)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto $stack10 = newarray (java.lang.Object)[0]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "316"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "355"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper), 355)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1882"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>(), 1882)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "376"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <com.fasterxml.jackson.databind.util.EmptyIterator: com.fasterxml.jackson.databind.util.EmptyIterator instance>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.util.EmptyIterator",
  "method": "<com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>",
  "line": "17"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)","(<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>, $stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>(), 177)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = dataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack6 = dataModel instanceof freemarker.template.TemplateHashModel, 347)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = dataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack6 = dataModel instanceof freemarker.template.TemplateHashModel, 347)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack33",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "359"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel, 359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = dataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack6 = dataModel instanceof freemarker.template.TemplateHashModel, 347)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "301"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <com.fasterxml.jackson.databind.util.EmptyIterator: com.fasterxml.jackson.databind.util.EmptyIterator instance>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.util.EmptyIterator",
  "method": "<com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>",
  "line": "17"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)","(<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>, $stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>(), 177)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack15 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack15 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 == 0 goto return r",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return r",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = virtualinvoke $stack10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack12)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack13 = virtualinvoke $stack10.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack12), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack14 = virtualinvoke $stack13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' didn\'t convert ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack14 = virtualinvoke $stack13.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' didn\'t convert '), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = virtualinvoke $stack14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack16)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack17 = virtualinvoke $stack14.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack16), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to a TemplateHashModel. Generally, you want to use a Map<String, Object> or a ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack18 = virtualinvoke $stack17.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to a TemplateHashModel. Generally, you want to use a Map<String, Object> or a '), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('JavaBean as the root-map (aka. data-model) parameter. The Map key-s or JavaBean ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('JavaBean as the root-map (aka. data-model) parameter. The Map key-s or JavaBean '), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack20 = virtualinvoke $stack19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('property names will be the variable names in the template.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack20 = virtualinvoke $stack19.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>('property names will be the variable names in the template.'), 365)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack21 = virtualinvoke $stack20.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack21 = virtualinvoke $stack20.<java.lang.StringBuffer: java.lang.String toString()>(), 365)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack21)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "365"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack21), 365)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "376"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack79 = this.<com.mapr.synth.Synth$ReportingWorker: int localCount>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack79 = this.<com.mapr.synth.Synth$ReportingWorker: int localCount>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "count := @parameter4: int",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if writer#3 >= count goto return count",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "281"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = dataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack6 = dataModel instanceof freemarker.template.TemplateHashModel, 347)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "347"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack50 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.Synth$Options opts>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack50 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.Synth$Options opts>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "opts := @parameter0: com.mapr.synth.Synth$Options",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack24 = virtualinvoke wrapper.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.String getName()>",
  "line": "640"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.FieldSampler: boolean flattener>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.FieldSampler",
  "method": "<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack34 = new freemarker.template.SimpleHash",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "355"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper), 355)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = $stack34",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "355"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = $stack34, 355)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "295"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "savedEnv = virtualinvoke $stack4.<java.lang.ThreadLocal: java.lang.Object get()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "228"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, savedEnv = virtualinvoke $stack4.<java.lang.ThreadLocal: java.lang.Object get()>(), 228)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack15.<java.lang.ThreadLocal: void set(java.lang.Object)>(savedEnv)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "245"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack15.<java.lang.ThreadLocal: void set(java.lang.Object)>(savedEnv), 245)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "351"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrapper = virtualinvoke this.<freemarker.template.Template: freemarker.template.ObjectWrapper getObjectWrapper()>(), 351)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wrappedDataModel != null goto $stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<freemarker.core.Environment: java.io.Writer out>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack11 = this.<freemarker.core.Environment: java.io.Writer out>, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void flush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "238"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack11.<java.io.Writer: void flush()>(), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>(), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "fieldName = (java.lang.String) $stack17",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, fieldName = (java.lang.String) $stack17, 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack34 = new freemarker.template.SimpleHash",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "355"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper), 355)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "355"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack34.<freemarker.template.SimpleHash: void <init>(freemarker.template.ObjectWrapper)>(wrapper), 355)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack16 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = value instanceof java.io.Closeable",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack12 = value instanceof java.io.Closeable, 1892)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "359"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) wrappedDataModel, 359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = value instanceof java.io.Closeable",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack12 = value instanceof java.io.Closeable, 1892)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "298"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1881"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5), 1881)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack6 == 0 goto $stack7 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature CLOSE_CLOSEABLE>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1881"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1882"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>(), 1882)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ContainerNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)","(<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>, $stack1 = this.<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.JsonNodeFactory _nodeFactory>, 76)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack2",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if dataModel != null goto wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "354"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <com.fasterxml.jackson.databind.util.EmptyIterator: com.fasterxml.jackson.databind.util.EmptyIterator instance>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.util.EmptyIterator",
  "method": "<com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>",
  "line": "17"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)","(<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>, $stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>(), 177)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fieldName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: boolean isFlat()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack18 == 0 goto $stack19 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "310"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1879"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, config = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.SerializationConfig getSerializationConfig()>(), 1879)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10), 1888)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto return",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "307"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wrappedDataModel != null goto $stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19, 96)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(fieldName, $stack20), 96)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if dataModel != null goto wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "354"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.JsonNodeFactory",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = value instanceof java.io.Closeable",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack12 = value instanceof java.io.Closeable, 1892)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e#4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.core.io.IOContext _createContext(java.lang.Object,boolean)>(sw#2, 0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "505"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, e#4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.core.io.IOContext _createContext(java.lang.Object,boolean)>(sw#2, 0), 505)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, specialinvoke tmp$220689838.<com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator: void <init>(com.fasterxml.jackson.core.io.IOContext,int,int,com.fasterxml.jackson.core.ObjectCodec,javax.xml.stream.XMLStreamWriter)>(e#4, $stack8, $stack7, $stack6, sw#2), 506)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) dataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "348"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) dataModel, 348)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature FLUSH_AFTER_WRITE_VALUE>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10), 1888)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack11 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack10), 1888)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack11 == 0 goto return",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1888"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack80 = <java.lang.System: java.io.PrintStream out>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter3: java.io.PrintStream",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack13.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, specialinvoke $stack13.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(out), 275)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted '), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.'), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>(), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "96"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack20 = (com.fasterxml.jackson.databind.JsonNode) $stack19, 96)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if value != null goto $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$220689838 = new com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1882"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: com.fasterxml.jackson.core.JsonGenerator useDefaultPrettyPrinter()>(), 1882)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "295"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack28 = virtualinvoke dataModel.<java.lang.Object: java.lang.Class getClass()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack29 = virtualinvoke $stack28.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted '), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.'), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>(), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack11",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if wrappedDataModel != null goto $stack9 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack9 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "names := @parameter2: java.util.List",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "298"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <com.fasterxml.jackson.databind.util.EmptyIterator: com.fasterxml.jackson.databind.util.EmptyIterator instance>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.util.EmptyIterator",
  "method": "<com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>",
  "line": "17"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)","(<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>, $stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>(), 177)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "quoteConvention := @parameter1: com.mapr.synth.Synth$Quote",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "298"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, ',', out), 298)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack22 = new java.lang.IllegalArgumentException",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>",
  "line": "30"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)","(<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>, specialinvoke $stack1.<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(this), 319)","(<com.fasterxml.jackson.databind.node.ObjectNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>, specialinvoke this.<com.fasterxml.jackson.databind.node.ContainerNode: void <init>(com.fasterxml.jackson.databind.node.JsonNodeFactory)>(nc), 30)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack9",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "502"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, e = $stack9, 502)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, $stack3 = this.<com.fasterxml.jackson.databind.node.ObjectNode: java.util.Map _children>, 309)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$869454818 = (java.io.IOException) e#2",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, tmp$869454818 = (java.io.IOException) e#2, -1)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke tmp$869454818.<java.io.IOException: void printStackTrace()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "380"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke tmp$869454818.<java.io.IOException: void printStackTrace()>(), 380)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack3.<freemarker.core.Environment: void process()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1889"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>(), 1889)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "229"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack6.<java.lang.ThreadLocal: void set(java.lang.Object)>(this), 229)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>(), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "fieldName = (java.lang.String) $stack17",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, fieldName = (java.lang.String) $stack17, 88)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fieldName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = <com.fasterxml.jackson.databind.SerializationFeature: com.fasterxml.jackson.databind.SerializationFeature INDENT_OUTPUT>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1881"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5), 1881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "f := @parameter0: com.fasterxml.jackson.databind.SerializationFeature",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationConfig",
  "method": "<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack6 = virtualinvoke config.<com.fasterxml.jackson.databind.SerializationConfig: boolean isEnabled(com.fasterxml.jackson.databind.SerializationFeature)>($stack5), 1881)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.databind.SerializationFeature",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationFeature",
  "method": "<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, virtualinvoke $stack73.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>($stack72), 239)","(<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>, $stack3 = virtualinvoke $stack2.<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>(f), 1512)","(<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>, $stack4 = virtualinvoke feature.<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>(), 332)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack2 = virtualinvoke this.<com.fasterxml.jackson.databind.SerializationFeature: int ordinal()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.SerializationFeature",
  "method": "<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>",
  "line": "377"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, virtualinvoke $stack73.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>($stack72), 239)","(<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ObjectMapper enable(com.fasterxml.jackson.databind.SerializationFeature)>, $stack3 = virtualinvoke $stack2.<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>(f), 1512)","(<com.fasterxml.jackson.databind.SerializationConfig: com.fasterxml.jackson.databind.SerializationConfig 'with'(com.fasterxml.jackson.databind.SerializationFeature)>, $stack4 = virtualinvoke feature.<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>(), 332)","(<com.fasterxml.jackson.databind.SerializationFeature: int getMask()>, $stack2 = virtualinvoke this.<com.fasterxml.jackson.databind.SerializationFeature: int ordinal()>(), 377)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if dataModel != null goto wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "354"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = <freemarker.core.Environment: java.lang.ThreadLocal threadEnv>",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "245"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack15.<java.lang.ThreadLocal: void set(java.lang.Object)>(savedEnv), 245)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack15.<java.lang.ThreadLocal: void set(java.lang.Object)>(savedEnv)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "245"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke $stack15.<java.lang.ThreadLocal: void set(java.lang.Object)>(savedEnv), 245)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack50 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.Synth$Options opts>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack50 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.Synth$Options opts>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "opts := @parameter0: com.mapr.synth.Synth$Options",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack8 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "quoteConvention := @parameter1: com.mapr.synth.Synth$Quote",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "295"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "223"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack82 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "232"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 232)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "301"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "301"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack27 = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: com.fasterxml.jackson.databind.JsonNode get(java.lang.String)>(key), 93)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack15 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 87)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack15 == 0 goto return r",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack49 = this.<com.mapr.synth.Synth$ReportingWorker: com.mapr.synth.samplers.SchemaSampler sampler>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "s := @parameter1: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.mapr.synth.samplers.SchemaSampler",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return r",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e = $stack9",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "502"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, e = $stack9, 502)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$2057834672 = (javax.xml.stream.XMLStreamException) e",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, tmp$2057834672 = (javax.xml.stream.XMLStreamException) e, -1)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>, $stack10 = staticinvoke <com.fasterxml.jackson.dataformat.xml.util.StaxUtil: java.lang.Object throwXmlAsIOException(javax.xml.stream.XMLStreamException)>(tmp$2057834672), 503)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = (com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator) $stack10",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "503"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "93"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack6 = new java.io.IOException",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "310"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, specialinvoke $stack6.<java.io.IOException: void <init>(java.lang.Throwable)>(e), 310)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack6.<java.io.IOException: void <init>(java.lang.Throwable)>(e)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "310"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, specialinvoke $stack6.<java.io.IOException: void <init>(java.lang.Throwable)>(e), 310)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "e#2 = $stack7",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "379"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, e#2 = $stack7, 379)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "tmp$869454818 = (java.io.IOException) e#2",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, tmp$869454818 = (java.io.IOException) e#2, -1)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke tmp$869454818.<java.io.IOException: void printStackTrace()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "380"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke tmp$869454818.<java.io.IOException: void printStackTrace()>(), 380)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack26 = interfaceinvoke it.<java.util.Iterator: java.lang.Object next()>(), 92)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "key = (java.lang.String) $stack26",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "92"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, key = (java.lang.String) $stack26, 92)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fieldName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack24 = newarray (java.lang.Object)[2]",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "322"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s%s', $stack24), 322)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s%s', $stack24)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>",
  "line": "322"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>(quoteConvention, names, fields, '\t', out), 295)","(<com.mapr.synth.Synth$ReportingWorker: void printDelimited(com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.lang.String,java.io.PrintStream)>, virtualinvoke out.<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])>('%s%s', $stack24), 322)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "writer = $stack13",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, writer = $stack13, 275)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x5 := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "writer := @parameter5: java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "out := @parameter1: java.io.Writer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1887"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke $stack9.<com.fasterxml.jackson.databind.ser.DefaultSerializerProvider: void serializeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(jgen, value), 1887)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack9 = this.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.node.JsonNodeFactory nodeFactory>, 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "242"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>(), 242)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = value instanceof java.io.Closeable",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, $stack12 = value instanceof java.io.Closeable, 1892)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack12 == 0 goto $stack9 = virtualinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: com.fasterxml.jackson.databind.ser.DefaultSerializerProvider _serializerProvider(com.fasterxml.jackson.databind.SerializationConfig)>(config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1892"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "dataModelHash = (freemarker.template.TemplateHashModel) dataModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "348"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, dataModelHash = (freemarker.template.TemplateHashModel) dataModel, 348)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack33.<freemarker.core.Environment: void <init>(freemarker.template.Template,freemarker.template.TemplateHashModel,java.io.Writer)>(this, dataModelHash, out), 372)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>",
  "line": "70"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack17 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: java.util.List getFieldNames()>(), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "59"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = new java.io.PrintWriter",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, specialinvoke $stack13.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(out), 275)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack13.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(out)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "275"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, specialinvoke $stack13.<java.io.PrintWriter: void <init>(java.io.OutputStream)>(out), 275)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x3 := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "dataModel := @parameter0: java.lang.Object",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack7 = virtualinvoke this.<freemarker.core.Environment: freemarker.template.Template getTemplate()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack1 = this.<freemarker.template.Template: freemarker.core.TemplateElement rootElement>",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>",
  "line": "600"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack8 = virtualinvoke $stack7.<freemarker.template.Template: freemarker.core.TemplateElement getRootTreeNode()>(), 235)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "235"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void visit(freemarker.core.TemplateElement)>($stack8), 235)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "86"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack11 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List fields>, 86)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "fx = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "86"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, fx = interfaceinvoke $stack11.<java.util.List: java.util.Iterator iterator()>(), 86)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack17 = interfaceinvoke fx.<java.util.Iterator: java.lang.Object next()>(), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "fieldName = (java.lang.String) $stack17",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "88"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, fieldName = (java.lang.String) $stack17, 88)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fieldName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.node.NullNode: com.fasterxml.jackson.databind.node.NullNode getInstance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "107"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)","(<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>, $stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 76)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ContainerNode",
  "method": "<com.fasterxml.jackson.databind.node.ContainerNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>",
  "line": "76"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "307"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, value = virtualinvoke this.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.node.NullNode nullNode()>(), 307)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.ObjectNode",
  "method": "<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>",
  "line": "309"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, virtualinvoke r.<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>(key, $stack27), 93)","(<com.fasterxml.jackson.databind.node.ObjectNode: com.fasterxml.jackson.databind.JsonNode set(java.lang.String,com.fasterxml.jackson.databind.JsonNode)>, interfaceinvoke $stack3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(fieldName, value), 309)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack25 = virtualinvoke $stack24.<java.lang.Class: java.lang.String getName()>(), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = new java.lang.StringBuffer",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "361"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack23.<java.lang.StringBuffer: void <init>()>(), 361)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack26 = virtualinvoke $stack23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack25)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack26 = virtualinvoke $stack23.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack25), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted ')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack27 = virtualinvoke $stack26.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' converted '), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack30 = virtualinvoke $stack27.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($stack29), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.')",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack31 = virtualinvoke $stack30.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>(' to null.'), 362)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack32 = virtualinvoke $stack31.<java.lang.StringBuffer: java.lang.String toString()>(), 362)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "362"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, specialinvoke $stack22.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($stack32), 362)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>",
  "line": "247"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack48 = this.<com.mapr.synth.Synth$ReportingWorker: freemarker.template.Template template>, 247)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "template := @parameter2: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x4 := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "temp := @parameter4: freemarker.template.Template",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.template.Template",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "357"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, wrappedDataModel = interfaceinvoke wrapper.<freemarker.template.ObjectWrapper: freemarker.template.TemplateModel wrap(java.lang.Object)>(dataModel), 357)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": ["(<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>, $stack8 = wrappedDataModel instanceof freemarker.template.TemplateHashModel, 358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack8 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "358"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <com.fasterxml.jackson.databind.util.EmptyIterator: java.util.Iterator instance()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.JsonNode",
  "method": "<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>",
  "line": "177"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this)",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "234"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, virtualinvoke this.<freemarker.core.Environment: void doAutoImportsAndIncludes(freemarker.core.Environment)>(this), 234)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = <com.mapr.synth.Synth$ReportingWorker: com.fasterxml.jackson.dataformat.xml.XmlMapper xmlMapper>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "306"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: com.fasterxml.jackson.dataformat.xml.XmlMapper",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>, $stack1 = this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.core.JsonFactory _jsonFactory>, 124)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = (com.fasterxml.jackson.dataformat.xml.XmlFactory) $stack1",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>",
  "line": "124"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, $stack4 = virtualinvoke this.<com.fasterxml.jackson.dataformat.xml.XmlMapper: com.fasterxml.jackson.dataformat.xml.XmlFactory getFactory()>(), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>()",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1889"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, virtualinvoke jgen.<com.fasterxml.jackson.core.JsonGenerator: void flush()>(), 1889)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "tmp$220689838 = new com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlFactory",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>",
  "line": "506"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "208"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, g = virtualinvoke $stack4.<com.fasterxml.jackson.dataformat.xml.XmlFactory: com.fasterxml.jackson.dataformat.xml.ser.ToXmlGenerator createGenerator(javax.xml.stream.XMLStreamWriter)>(w0), 208)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "jgen := @parameter0: com.fasterxml.jackson.core.JsonGenerator",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.ObjectMapper",
  "method": "<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>",
  "line": "1885"
},
"stackTrace": ["(<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void _writeCloseableValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object,com.fasterxml.jackson.databind.SerializationConfig)>(jgen, value, config), 1885)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new com.fasterxml.jackson.databind.node.ObjectNode",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.databind.node.JsonNodeFactory",
  "method": "<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>",
  "line": "319"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>(), 85)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "r = virtualinvoke $stack9.<com.fasterxml.jackson.databind.node.JsonNodeFactory: com.fasterxml.jackson.databind.node.ObjectNode objectNode()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "85"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "282"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack10 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter3: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "fields := @parameter0: com.fasterxml.jackson.databind.JsonNode",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "value := @parameter1: java.lang.Object",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value)",
"location": {
  "file": "",
  "class": "com.fasterxml.jackson.dataformat.xml.XmlMapper",
  "method": "<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>",
  "line": "209"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>($stack7, $stack8, $stack9, $stack10, out), 282)","(<com.mapr.synth.Synth$ReportingWorker: void format(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,java.io.PrintStream)>, staticinvoke <com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>(fields), 301)","(<com.mapr.synth.Synth$ReportingWorker: void printXml(com.fasterxml.jackson.databind.JsonNode)>, virtualinvoke $stack3.<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>($stack2, fields), 306)","(<com.fasterxml.jackson.dataformat.xml.XmlMapper: void writeValue(javax.xml.stream.XMLStreamWriter,java.lang.Object)>, specialinvoke this.<com.fasterxml.jackson.databind.ObjectMapper: void writeValue(com.fasterxml.jackson.core.JsonGenerator,java.lang.Object)>(g, value), 209)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack13 = this.<com.mapr.synth.samplers.SchemaSampler: java.util.List schema>, 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "87"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, l3 = interfaceinvoke $stack13.<java.util.List: java.util.Iterator iterator()>(), 87)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack16 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "s = (com.mapr.synth.samplers.FieldSampler) $stack16",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "99"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, s = (com.mapr.synth.samplers.FieldSampler) $stack16, 99)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack23 = virtualinvoke s.<com.mapr.synth.samplers.FieldSampler: java.lang.Object sample()>(), 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "v = (com.fasterxml.jackson.databind.JsonNode) $stack23",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "90"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, v = (com.fasterxml.jackson.databind.JsonNode) $stack23, 90)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, it = virtualinvoke v.<com.fasterxml.jackson.databind.JsonNode: java.util.Iterator fieldNames()>(), 91)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>()",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack18 = virtualinvoke s.<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>(), 278)","(<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>, $stack25 = interfaceinvoke it.<java.util.Iterator: boolean hasNext()>(), 91)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack25 == 0 goto (branch)",
"location": {
  "file": "",
  "class": "com.mapr.synth.samplers.SchemaSampler",
  "method": "<com.mapr.synth.samplers.SchemaSampler: com.fasterxml.jackson.databind.JsonNode sample()>",
  "line": "91"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack33 = new freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>",
  "line": "372"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null)",
"location": {
  "file": "",
  "class": "freemarker.template.Template",
  "method": "<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>",
  "line": "262"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, $stack3 = virtualinvoke this.<freemarker.template.Template: freemarker.core.Environment createProcessingEnvironment(java.lang.Object,java.io.Writer,freemarker.template.ObjectWrapper)>(dataModel, out, null), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Environment",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)","(<com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, virtualinvoke temp.<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>(fields, writer), 376)","(<freemarker.template.Template: void process(java.lang.Object,java.io.Writer)>, virtualinvoke $stack3.<freemarker.core.Environment: void process()>(), 262)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: freemarker.core.Configurable",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "-1"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)","(<freemarker.core.Configurable: boolean getAutoFlush()>, $stack3 = this.<freemarker.core.Configurable: freemarker.core.Configurable parent>, 880)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<freemarker.core.Configurable: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Configurable",
  "method": "<freemarker.core.Configurable: boolean getAutoFlush()>",
  "line": "880"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": ["(<freemarker.core.Environment: void process()>, $stack9 = virtualinvoke this.<freemarker.core.Environment: boolean getAutoFlush()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack9 == 0 goto specialinvoke this.<freemarker.core.Environment: void clearCachedValues()>()",
"location": {
  "file": "",
  "class": "freemarker.core.Environment",
  "method": "<freemarker.core.Environment: void process()>",
  "line": "237"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack16 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth$ReportingWorker",
  "method": "<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>",
  "line": "278"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, $stack16 = opts.<com.mapr.synth.Synth$Options: com.mapr.synth.Synth$Quote quote>, 278)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x1 := @parameter1: com.mapr.synth.Synth$Quote",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "-1"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5)",
"location": {
  "file": "",
  "class": "com.mapr.synth.Synth",
  "method": "<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>",
  "line": "59"
},
"stackTrace": ["(<com.mapr.synth.Synth$ReportingWorker: java.lang.Integer call()>, $stack84 = staticinvoke <com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>($stack83, $stack82, $stack81, $stack80, $stack79), 223)","(<com.mapr.synth.Synth$ReportingWorker: int generateFile(com.mapr.synth.Synth$Options,com.mapr.synth.samplers.SchemaSampler,freemarker.template.Template,java.io.PrintStream,int)>, staticinvoke <com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>($stack15, $stack16, $stack17, $stack18, template, writer), 278)","(<com.mapr.synth.Synth: void access$100(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>, staticinvoke <com.mapr.synth.Synth: void formatTemplate(com.mapr.synth.Synth$Format,com.mapr.synth.Synth$Quote,java.util.List,com.fasterxml.jackson.databind.JsonNode,freemarker.template.Template,java.io.PrintWriter)>(x0, x1, x2, x3, x4, x5), 59)"]
}]
}
}

]
