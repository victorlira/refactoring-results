[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>,this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2,32,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109) => (<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853) => (<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102) => (<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2, 32)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>, 86)) SINK=>BASE: Node(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>,this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2,32,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109) => (<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853) => (<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102) => (<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2, 32)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>, 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(name),86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,old = (org.codehaus.jackson.JsonNode) $stack7,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, old = (org.codehaus.jackson.JsonNode) $stack7, 86))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2",
				"location": {
					"file": "",
					"class": "org.apache.avro.JsonProperties",
					"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
					"line": 32
				},
				"stackTrace": [{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
	"line": 32
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2",
				"location": {
					"file": "",
					"class": "org.apache.avro.JsonProperties",
					"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
					"line": 32
				},
				"stackTrace": [{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
	"line": 32
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>",
				"location": {
					"file": "",
					"class": "org.apache.avro.JsonProperties",
					"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
					"line": 86
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>,schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, "", "", 0),136,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)) => Node(<org.apache.avro.Schema: void setFields(java.util.List)>,this := @this: org.apache.avro.Schema,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke schema.<org.apache.avro.Schema: void setFields(java.util.List)>(fields), 137)) => Node(<org.apache.avro.Schema: void setFields(java.util.List)>,$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(this),201,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke schema.<org.apache.avro.Schema: void setFields(java.util.List)>(fields), 137) => (<org.apache.avro.Schema: void setFields(java.util.List)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(this), 201)) => Node(<org.apache.avro.Schema: void setFields(java.util.List)>,$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>(),201,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke schema.<org.apache.avro.Schema: void setFields(java.util.List)>(fields), 137) => (<org.apache.avro.Schema: void setFields(java.util.List)>, $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>(), 201)) => Node(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>,message := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) SINK=>BASE: Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate in union:"),786,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167) => (<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)) => Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name),786,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167) => (<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)) => Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(),786,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167) => (<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)) => Node(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>,message := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1),62,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema$UnionSchema",
					"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
					"line": 786
				},
				"stackTrace": [{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": 786
},{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": 786
},{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": 786
},{
	"class": "org.apache.avro.AvroRuntimeException",
	"method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0)",
				"location": {
					"file": "",
					"class": "ly.stealth.xmlavro.SchemaBuilder",
					"method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
					"line": 136
				},
				"stackTrace": [{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
	"line": 136
},{
	"class": "org.apache.avro.Schema",
	"method": "<org.apache.avro.Schema: void setFields(java.util.List)>",
	"line": -1
},{
	"class": "org.apache.avro.Schema",
	"method": "<org.apache.avro.Schema: void setFields(java.util.List)>",
	"line": 201
},{
	"class": "org.apache.avro.Schema",
	"method": "<org.apache.avro.Schema: void setFields(java.util.List)>",
	"line": 201
},{
	"class": "org.apache.avro.AvroRuntimeException",
	"method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": 62
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.RuntimeException",
					"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
					"line": 62
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>,$stack3 = this.<ly.stealth.xmlavro.SchemaBuilder: int typeName>,329,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136) => (<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>, $stack3 = this.<ly.stealth.xmlavro.SchemaBuilder: int typeName>, 329)) => Node(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>,$stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3),329,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136) => (<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>, $stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3), 329)) => Node(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>,$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>(),329,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)) => Node(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>,$stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(),136,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)) => Node(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>,schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, "", "", 0),136,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>,this := @this: org.apache.avro.JsonProperties,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,this := @this: org.apache.avro.JsonProperties,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>, 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(name),86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,old = (org.codehaus.jackson.JsonNode) $stack7,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, old = (org.codehaus.jackson.JsonNode) $stack7, 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack8 = virtualinvoke old.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>(value),89,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack8 = virtualinvoke old.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>(value), 89)) SINK=>BASE: Node(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>,$stack1 = new org.apache.avro.Schema$UnionSchema,167,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)) => Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,this := @this: org.apache.avro.Schema$UnionSchema,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)) => Node(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>,this := @this: org.apache.avro.Schema,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109) => (<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)) => Node(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>,this := @this: org.apache.avro.JsonProperties,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109) => (<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853) => (<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)) => Node(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>,this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2,32,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109) => (<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853) => (<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102) => (<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2, 32)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>, 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(name),86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack7 = interfaceinvoke $stack6.<java.util.Map: java.lang.Object get(java.lang.Object)>(name), 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,old = (org.codehaus.jackson.JsonNode) $stack7,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, old = (org.codehaus.jackson.JsonNode) $stack7, 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack8 = virtualinvoke old.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>(value),89,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack8 = virtualinvoke old.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>(value), 89))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = new org.apache.avro.Schema$UnionSchema",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema",
					"method": "<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>",
					"line": 167
				},
				"stackTrace": [{
	"class": "org.apache.avro.Schema",
	"method": "<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>",
	"line": 167
},{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": -1
},{
	"class": "org.apache.avro.Schema",
	"method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
	"line": -1
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
	"line": -1
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
	"line": 32
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 89
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = this.<ly.stealth.xmlavro.SchemaBuilder: int typeName>",
				"location": {
					"file": "",
					"class": "ly.stealth.xmlavro.SchemaBuilder",
					"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
					"line": 329
				},
				"stackTrace": [{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
	"line": 329
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
	"line": 329
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
	"line": 329
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
	"line": 136
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
	"line": 136
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": -1
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 89
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = virtualinvoke old.<org.codehaus.jackson.JsonNode: boolean equals(java.lang.Object)>(value)",
				"location": {
					"file": "",
					"class": "org.apache.avro.JsonProperties",
					"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
					"line": 89
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>,$stack3 = this.<ly.stealth.xmlavro.SchemaBuilder: int typeName>,329,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136) => (<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>, $stack3 = this.<ly.stealth.xmlavro.SchemaBuilder: int typeName>, 329)) => Node(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>,$stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3),329,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136) => (<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>, $stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3), 329)) => Node(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>,$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>(),329,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)) => Node(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>,$stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(),136,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)) => Node(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>,schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, "", "", 0),136,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>,this := @this: org.apache.avro.JsonProperties,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,this := @this: org.apache.avro.JsonProperties,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack14 = this.<org.apache.avro.JsonProperties: java.util.Map props>,88,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack14 = this.<org.apache.avro.JsonProperties: java.util.Map props>, 88)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,interfaceinvoke $stack14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, value),88,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, interfaceinvoke $stack14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, value), 88)) SINK=>BASE: Node(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>,this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2,32,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109) => (<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853) => (<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102) => (<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2, 32)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>,86,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack6 = this.<org.apache.avro.JsonProperties: java.util.Map props>, 86)) => Node(<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>,$stack14 = this.<org.apache.avro.JsonProperties: java.util.Map props>,88,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke field.<org.apache.avro.Schema$Field: void addProp(java.lang.String,java.lang.String)>('source', $stack28), 132) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>, virtualinvoke this.<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>(name, $stack3), 67) => (<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>, $stack14 = this.<org.apache.avro.JsonProperties: java.util.Map props>, 88))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "this.<org.apache.avro.JsonProperties: java.util.Map props> = $stack2",
				"location": {
					"file": "",
					"class": "org.apache.avro.JsonProperties",
					"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
					"line": 32
				},
				"stackTrace": [{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
	"line": 32
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 86
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 88
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = this.<ly.stealth.xmlavro.SchemaBuilder: int typeName>",
				"location": {
					"file": "",
					"class": "ly.stealth.xmlavro.SchemaBuilder",
					"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
					"line": 329
				},
				"stackTrace": [{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
	"line": 329
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
	"line": 329
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
	"line": 329
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
	"line": 136
},{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
	"line": 136
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": -1
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 88
},{
	"class": "org.apache.avro.JsonProperties",
	"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
	"line": 88
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke $stack14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(name, value)",
				"location": {
					"file": "",
					"class": "org.apache.avro.JsonProperties",
					"method": "<org.apache.avro.JsonProperties: void addProp(java.lang.String,org.codehaus.jackson.JsonNode)>",
					"line": 88
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>,$stack14 = this.<org.apache.avro.Schema$Name: java.lang.String space>,444,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145) => (<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack14 = this.<org.apache.avro.Schema$Name: java.lang.String space>, 444)) => Node(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>,$stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14),444,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145) => (<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14), 444)) => Node(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>,$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("."),444,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145) => (<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)) => Node(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>,$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17),444,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145) => (<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)) => Node(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>,$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(),444,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145) => (<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)) => Node(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>,this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19,444,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145) => (<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)) => Node(<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>,$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>,425,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145) => (<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559) => (<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)) => Node(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>,$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name),481,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145) => (<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559) => (<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)) => Node(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>,$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10),481,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145) => (<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559) => (<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)) => Node(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>,$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(),481,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145) => (<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559) => (<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)) => Node(<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>,message := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136) => (<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145) => (<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559) => (<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)) => Node(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>,message := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) SINK=>BASE: Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(),782,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167) => (<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)) => Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate in union:"),786,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167) => (<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)) => Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name),786,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167) => (<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)) => Node(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>,$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(),786,SourceNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129) => (<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167) => (<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)) => Node(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>,message := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)) => Node(<java.lang.RuntimeException: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1),66,SinkNode, path: (<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128) => (<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117) => (<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24) => (<java.lang.RuntimeException: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Exception: void <init>(java.lang.String)>(l1), 62) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema$UnionSchema",
					"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
					"line": 782
				},
				"stackTrace": [{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": 782
},{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": 786
},{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": 786
},{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
	"line": 786
},{
	"class": "org.apache.avro.AvroRuntimeException",
	"method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": 66
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack14 = this.<org.apache.avro.Schema$Name: java.lang.String space>",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema$Name",
					"method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
					"line": 444
				},
				"stackTrace": [{
	"class": "org.apache.avro.Schema$Name",
	"method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
	"line": 444
},{
	"class": "org.apache.avro.Schema$Name",
	"method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
	"line": 444
},{
	"class": "org.apache.avro.Schema$Name",
	"method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
	"line": 444
},{
	"class": "org.apache.avro.Schema$Name",
	"method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
	"line": 444
},{
	"class": "org.apache.avro.Schema$Name",
	"method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
	"line": 444
},{
	"class": "org.apache.avro.Schema$Name",
	"method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
	"line": 444
},{
	"class": "org.apache.avro.Schema$Name",
	"method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
	"line": 425
},{
	"class": "org.apache.avro.Schema$NamedSchema",
	"method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
	"line": 481
},{
	"class": "org.apache.avro.Schema$NamedSchema",
	"method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
	"line": 481
},{
	"class": "org.apache.avro.Schema$NamedSchema",
	"method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
	"line": 481
},{
	"class": "org.apache.avro.AvroTypeException",
	"method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "org.apache.avro.AvroRuntimeException",
	"method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>(java.lang.String)>",
	"line": 66
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1)",
				"location": {
					"file": "",
					"class": "java.lang.Exception",
					"method": "<java.lang.Exception: void <init>(java.lang.String)>",
					"line": 66
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "Schema$LockableArrayList.<org.apache.avro.Schema$LockableArrayList: boolean locked> - Schema$LockableArrayList.<org.apache.avro.Schema$LockableArrayList: boolean locked>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "Schema$LockableArrayList.<org.apache.avro.Schema$LockableArrayList: boolean locked> = null",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema$LockableArrayList",
					"method": "<init>",
					"line": -1
				},
				"stackTrace": [{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "createRootRecordSchema",
	"line": 129
},{
	"class": "org.apache.avro.Schema",
	"method": "createUnion",
	"line": 167
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "Schema$LockableArrayList.<org.apache.avro.Schema$LockableArrayList: boolean locked> = null",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema$LockableArrayList",
					"method": "<init>",
					"line": -1
				},
				"stackTrace": [{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "createRootRecordSchema",
	"line": 137
},{
	"class": "org.apache.avro.Schema$RecordSchema",
	"method": "setFields",
	"line": 585
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type> - this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type> = type",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema",
					"method": "<init>",
					"line": 103
				},
				"stackTrace": [{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "createRootRecordSchema",
	"line": 129
},{
	"class": "org.apache.avro.Schema",
	"method": "createUnion",
	"line": 167
},{
	"class": "org.apache.avro.Schema$UnionSchema",
	"method": "<init>",
	"line": 776
},{
	"class": "org.apache.avro.Schema",
	"method": "<init>",
	"line": 103
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type> = type",
				"location": {
					"file": "",
					"class": "org.apache.avro.Schema",
					"method": "<init>",
					"line": 103
				},
				"stackTrace": [{
	"class": "ly.stealth.xmlavro.SchemaBuilder",
	"method": "createRootRecordSchema",
	"line": 136
},{
	"class": "org.apache.avro.Schema",
	"method": "createRecord",
	"line": 145
},{
	"class": "org.apache.avro.Schema$RecordSchema",
	"method": "<init>",
	"line": 559
},{
	"class": "org.apache.avro.Schema$NamedSchema",
	"method": "<init>",
	"line": 477
},{
	"class": "org.apache.avro.Schema",
	"method": "<init>",
	"line": 103
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack21 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "439"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack21 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 439)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack21",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "439"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack21, 439)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = null",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "431"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = null, 431)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "79"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10), 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11, 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "445"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 445)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new org.apache.avro.Schema$RecordSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>",
  "line": "145"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema$RecordSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$RecordSchema",
  "method": "<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema$NamedSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.JsonProperties",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "36"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)","(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, specialinvoke this.<java.lang.Object: void <init>()>(), 36)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack15 = virtualinvoke $stack13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke name.<java.lang.String: int length()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack9 = virtualinvoke name.<java.lang.String: int length()>(), 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9), 442)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x0 := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)","(<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>, $stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0), 79)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "79"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10), 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11, 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.util.LinkedHashMap",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "32"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)","(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, specialinvoke $stack2.<java.util.LinkedHashMap: void <init>(int)>(1), 32)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.util.LinkedHashMap: void <init>(int)>(1)",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "32"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)","(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, specialinvoke $stack2.<java.util.LinkedHashMap: void <init>(int)>(1), 32)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "lastDot = virtualinvoke name.<java.lang.String: int lastIndexOf(int)>(46)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "434"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, lastDot = virtualinvoke name.<java.lang.String: int lastIndexOf(int)>(46), 434)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = lastDot + 1",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack8 = lastDot + 1, 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9), 442)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x0 := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)","(<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>, $stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0), 79)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "79"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10), 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11, 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Not a record: ')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void setFields(java.util.List)>",
  "line": "201"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke schema.<org.apache.avro.Schema: void setFields(java.util.List)>(fields), 137)","(<org.apache.avro.Schema: void setFields(java.util.List)>, $stack4 = virtualinvoke $stack3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Not a record: '), 201)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(this)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void setFields(java.util.List)>",
  "line": "201"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke schema.<org.apache.avro.Schema: void setFields(java.util.List)>(fields), 137)","(<org.apache.avro.Schema: void setFields(java.util.List)>, $stack5 = virtualinvoke $stack4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(this), 201)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void setFields(java.util.List)>",
  "line": "201"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, virtualinvoke schema.<org.apache.avro.Schema: void setFields(java.util.List)>(fields), 137)","(<org.apache.avro.Schema: void setFields(java.util.List)>, $stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>(), 201)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.apache.avro.Schema: java.util.Set SCHEMA_RESERVED>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "102"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "102"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = new org.apache.avro.Schema$Name",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>",
  "line": "145"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema$Name",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "445"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 445)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>()",
"location": {
  "file": "",
  "class": "ly.stealth.xmlavro.SchemaBuilder",
  "method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
  "line": "136"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String substring(int,int)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, lastDot), 441)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack6 = l0",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String substring(int,int)>",
  "line": "1969"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, lastDot), 441)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9), 442)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x0 := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)","(<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>, $stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0), 79)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "79"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10), 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11, 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = new org.apache.avro.Schema$RecordSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>",
  "line": "145"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema$RecordSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$RecordSchema",
  "method": "<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema$NamedSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "102"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new java.lang.StringBuilder",
"location": {
  "file": "",
  "class": "ly.stealth.xmlavro.SchemaBuilder",
  "method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
  "line": "329"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)","(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>, specialinvoke $stack1.<java.lang.StringBuilder: void <init>()>(), 329)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('type')",
"location": {
  "file": "",
  "class": "ly.stealth.xmlavro.SchemaBuilder",
  "method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
  "line": "329"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)","(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>, $stack2 = virtualinvoke $stack1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('type'), 329)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3)",
"location": {
  "file": "",
  "class": "ly.stealth.xmlavro.SchemaBuilder",
  "method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
  "line": "329"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)","(<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>, $stack5 = virtualinvoke $stack2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack3), 329)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = virtualinvoke $stack5.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "ly.stealth.xmlavro.SchemaBuilder",
  "method": "<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>",
  "line": "329"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>()",
"location": {
  "file": "",
  "class": "ly.stealth.xmlavro.SchemaBuilder",
  "method": "<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>",
  "line": "136"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, $stack13 = specialinvoke this.<ly.stealth.xmlavro.SchemaBuilder: java.lang.String nextTypeName()>(), 136)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.String",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String substring(int,int)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, lastDot), 441)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack6 = l0",
"location": {
  "file": "",
  "class": "java.lang.String",
  "method": "<java.lang.String: java.lang.String substring(int,int)>",
  "line": "1969"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack7 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>(0, lastDot), 441)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack10 = virtualinvoke name.<java.lang.String: java.lang.String substring(int,int)>($stack8, $stack9), 442)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x0 := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "name := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)","(<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>, $stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0), 79)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = staticinvoke <org.apache.avro.Schema: java.lang.String validateName(java.lang.String)>(x0)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>",
  "line": "79"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, specialinvoke $stack22.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>($stack23, optionalSchema, null, null), 131)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode)>, specialinvoke this.<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>(name, schema, doc, defaultValue, $stack5), 367)","(<org.apache.avro.Schema$Field: void <init>(java.lang.String,org.apache.avro.Schema,java.lang.String,org.codehaus.jackson.JsonNode,org.apache.avro.Schema$Field$Order)>, $stack7 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>(name), 372)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack11 = staticinvoke <org.apache.avro.Schema: java.lang.String access$200(java.lang.String)>($stack10), 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "442"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String name> = $stack11, 442)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack17 = this.<org.apache.avro.Schema$Name: java.lang.String name>, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack16 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('.'), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack18 = virtualinvoke $stack16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack17), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, $stack19 = virtualinvoke $stack18.<java.lang.StringBuilder: java.lang.String toString()>(), 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>",
  "line": "444"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack5.<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>(name, namespace), 145)","(<org.apache.avro.Schema$Name: void <init>(java.lang.String,java.lang.String)>, this.<org.apache.avro.Schema$Name: java.lang.String full> = $stack19, 444)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Name: java.lang.String full>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Name",
  "method": "<org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>",
  "line": "425"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack5 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 480)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack10 = staticinvoke <org.apache.avro.Schema$Name: java.lang.String access$400(org.apache.avro.Schema$Name)>(name), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack11 = virtualinvoke $stack9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack10), 481)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$NamedSchema",
  "method": "<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>",
  "line": "481"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, $stack12 = virtualinvoke $stack11.<java.lang.StringBuilder: java.lang.String toString()>(), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroTypeException",
  "method": "<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, schema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>($stack13, '', '', 0), 136)","(<org.apache.avro.Schema: org.apache.avro.Schema createRecord(java.lang.String,java.lang.String,java.lang.String,boolean)>, specialinvoke $stack4.<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>($stack5, doc, isError), 145)","(<org.apache.avro.Schema$RecordSchema: void <init>(org.apache.avro.Schema$Name,java.lang.String,boolean)>, specialinvoke this.<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>($stack4, name, doc), 559)","(<org.apache.avro.Schema$NamedSchema: void <init>(org.apache.avro.Schema$Type,org.apache.avro.Schema$Name,java.lang.String)>, specialinvoke $stack7.<org.apache.avro.AvroTypeException: void <init>(java.lang.String)>($stack12), 481)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "i$ = virtualinvoke types.<org.apache.avro.Schema$LockableArrayList: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "779"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, i$ = virtualinvoke types.<org.apache.avro.Schema$LockableArrayList: java.util.Iterator iterator()>(), 779)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "788"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack11 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>(), 788)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "type = (org.apache.avro.Schema) $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "788"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, type = (org.apache.avro.Schema) $stack11, 788)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack1 = this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type>, 221)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x0 := @parameter0: org.apache.avro.Schema$Type",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Type",
  "method": "<org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1), 221)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Type: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Type",
  "method": "<org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>",
  "line": "91"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1), 221)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "237"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "782"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Type: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Type",
  "method": "<org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>",
  "line": "91"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1), 221)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "237"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "782"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "782"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "784"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(), 784)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.util.LinkedHashMap",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "32"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)","(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, specialinvoke $stack2.<java.util.LinkedHashMap: void <init>(int)>(1), 32)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.util.LinkedHashMap: void <init>(int)>(1)",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "32"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)","(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, specialinvoke $stack2.<java.util.LinkedHashMap: void <init>(int)>(1), 32)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack30 = new org.apache.avro.AvroRuntimeException",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "781"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, specialinvoke $stack30.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack34), 781)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.AvroRuntimeException",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new org.apache.avro.Schema$UnionSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>",
  "line": "167"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema$UnionSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.JsonProperties",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.Object: void <init>()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.JsonProperties",
  "method": "<org.apache.avro.JsonProperties: void <init>(java.util.Set)>",
  "line": "36"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)","(<org.apache.avro.JsonProperties: void <init>(java.util.Set)>, specialinvoke this.<java.lang.Object: void <init>()>(), 36)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = <org.apache.avro.Schema: java.util.Set SCHEMA_RESERVED>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "102"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "102"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "237"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "782"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new org.apache.avro.Schema$UnionSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>",
  "line": "167"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema$UnionSchema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>",
  "line": "102"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack11.<org.apache.avro.Schema$StringSchema: void <init>()>(), 109)","(<org.apache.avro.Schema$StringSchema: void <init>()>, specialinvoke this.<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>($stack1), 853)","(<org.apache.avro.Schema: void <init>(org.apache.avro.Schema$Type)>, specialinvoke this.<org.apache.avro.JsonProperties: void <init>(java.util.Set)>($stack2), 102)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "type = (org.apache.avro.Schema) $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "788"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, type = (org.apache.avro.Schema) $stack11, 788)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack1 = this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type>, 221)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x0 := @parameter0: org.apache.avro.Schema$Type",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Type",
  "method": "<org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1), 221)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Type: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Type",
  "method": "<org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>",
  "line": "91"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1), 221)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "237"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "782"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new org.apache.avro.Schema$LockableArrayList",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>",
  "line": "167"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack2.<org.apache.avro.Schema$LockableArrayList: void <init>(java.util.List)>(types), 167)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "types := @parameter0: org.apache.avro.Schema$LockableArrayList",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "i$ = virtualinvoke types.<org.apache.avro.Schema$LockableArrayList: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "779"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, i$ = virtualinvoke types.<org.apache.avro.Schema$LockableArrayList: java.util.Iterator iterator()>(), 779)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "788"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack11 = interfaceinvoke i$.<java.util.Iterator: java.lang.Object next()>(), 788)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "type = (org.apache.avro.Schema) $stack11",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "788"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, type = (org.apache.avro.Schema) $stack11, 788)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.apache.avro.Schema",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack1 = this.<org.apache.avro.Schema: org.apache.avro.Schema$Type type>, 221)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "x0 := @parameter0: org.apache.avro.Schema$Type",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Type",
  "method": "<org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1), 221)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = x0.<org.apache.avro.Schema$Type: java.lang.String name>",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$Type",
  "method": "<org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>",
  "line": "91"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)","(<org.apache.avro.Schema: java.lang.String getName()>, $stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1), 221)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.apache.avro.Schema$Type: java.lang.String access$000(org.apache.avro.Schema$Type)>($stack1)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getName()>",
  "line": "221"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)","(<org.apache.avro.Schema: java.lang.String getFullName()>, $stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>(), 237)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "237"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "782"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.apache.avro.Schema: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema",
  "method": "<org.apache.avro.Schema: java.lang.String getFullName()>",
  "line": "237"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "782"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, name = virtualinvoke type.<org.apache.avro.Schema: java.lang.String getFullName()>(), 782)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:')",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack22 = virtualinvoke $stack21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('Duplicate in union:'), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name)",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack23 = virtualinvoke $stack22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(name), 786)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.apache.avro.Schema$UnionSchema",
  "method": "<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>",
  "line": "786"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, optionalSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>($stack20), 129)","(<org.apache.avro.Schema: org.apache.avro.Schema createUnion(java.util.List)>, specialinvoke $stack1.<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>($stack2), 167)","(<org.apache.avro.Schema$UnionSchema: void <init>(org.apache.avro.Schema$LockableArrayList)>, $stack24 = virtualinvoke $stack23.<java.lang.StringBuilder: java.lang.String toString()>(), 786)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "message := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message)",
"location": {
  "file": "",
  "class": "org.apache.avro.AvroRuntimeException",
  "method": "<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>",
  "line": "24"
},
"stackTrace": ["(<ly.stealth.xmlavro.SchemaBuilder: org.apache.avro.Schema createRootRecordSchema(java.util.Map)>, nullSchema = staticinvoke <org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>($stack17), 128)","(<org.apache.avro.Schema: org.apache.avro.Schema create(org.apache.avro.Schema$Type)>, specialinvoke $stack12.<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>($stack16), 117)","(<org.apache.avro.AvroRuntimeException: void <init>(java.lang.String)>, specialinvoke this.<java.lang.RuntimeException: void <init>(java.lang.String)>(message), 24)"]
}]
}
}

]
