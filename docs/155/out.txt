source(spark.resource.ClassPathResource, exists, 122, $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:73), at spark.resource.ClassPathResource.exists(ClassPathResource.java:122)]) => sink(spark.resource.ClassPathResource, exists, 122, $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:86), at spark.resource.ClassPathResource.exists(ClassPathResource.java:122)])

source(spark.resource.ClassPathResource, exists, 122, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:73), at spark.resource.ClassPathResource.exists(ClassPathResource.java:122)]) => sink(spark.resource.ClassPathResource, exists, 122, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:86), at spark.resource.ClassPathResource.exists(ClassPathResource.java:122)])

source(spark.resource.ClassPathResource, exists, 119, $stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:73), at spark.resource.ClassPathResource.exists(ClassPathResource.java:119)]) => sink(spark.resource.ClassPathResource, exists, 119, $stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:86), at spark.resource.ClassPathResource.exists(ClassPathResource.java:119)])

source(spark.resource.ClassPathResource, exists, 120, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:73), at spark.resource.ClassPathResource.exists(ClassPathResource.java:120)]) => sink(spark.resource.ClassPathResource, exists, 120, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:86), at spark.resource.ClassPathResource.exists(ClassPathResource.java:120)])

source(spark.resource.ClassPathResource, exists, 120, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:73), at spark.resource.ClassPathResource.exists(ClassPathResource.java:120)]) => sink(spark.resource.ClassPathResource, exists, 120, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:86), at spark.resource.ClassPathResource.exists(ClassPathResource.java:120)])

source(spark.resource.ClassPathResource, exists, 124, $stack6 = 1, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:73), at spark.resource.ClassPathResource.exists(ClassPathResource.java:124)]) => sink(spark.resource.ClassPathResource, exists, 124, $stack6 = 1, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:86), at spark.resource.ClassPathResource.exists(ClassPathResource.java:124)])

source(spark.resource.ClassPathResource, exists, 124, $stack6 = 0, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:73), at spark.resource.ClassPathResource.exists(ClassPathResource.java:124)]) => sink(spark.resource.ClassPathResource, exists, 124, $stack6 = 1, [at spark.resource.ClassPathResourceHandler.getResource(ClassPathResourceHandler.java:86), at spark.resource.ClassPathResource.exists(ClassPathResource.java:124)])

List(Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7),120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,119,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 119)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if $stack2 == null goto $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,119,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>, 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3),122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3), 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResource: boolean exists()>,return $stack6,124,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),86,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 86)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3),122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3), 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,119,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 119)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if $stack2 == null goto $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,119,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>, 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3),122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3), 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResource: boolean exists()>,return $stack6,124,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)))

List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)))

List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>,74,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>, 74)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack16 == null goto resource = null,74,SimpleNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,resource = $stack17,75,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, resource = $stack17, 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),86,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 86)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack11 == 0 goto return null,86,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: ))

List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>,74,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>, 74)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack16 == null goto resource = null,74,SimpleNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,resource = $stack17,75,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, resource = $stack17, 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),86,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 86)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack11 == 0 goto return null,86,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)))

List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>,74,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>, 74)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack16 == null goto resource = null,74,SimpleNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,resource = $stack17,75,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, resource = $stack17, 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if resource == null goto return null,82,SinkNode, path: ))

