Running soot scenario spark;spark.resource.ClassPathResourceHandler;getResource(String);d8f6320e4c6d98ce16ebc33f07700bee9a95ae24
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/d8f6320e4c6d98ce16ebc33f07700bee9a95ae24/original-without-dependencies/spark-core-2.5.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,40400
Time to perform Confluence 1 Inter 2,01200
Configure Soot Confluence 2 Inter 0,13400
Time to perform Confluence 2 Inter 1,34400
Visited methods: 118
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)) => Node(<java.lang.String: int indexOf(int,int)>,$stack8 = l4[l5],1559,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack8 = l4[l5], 1559))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)) => Node(<java.lang.String: int indexOf(int,int)>,$stack8 = l4[l5],1559,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack8 = l4[l5], 1559)), SOURCE=>BASE: Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack10 == 0 goto $stack7 = virtualinvoke trimmed.<java.lang.String: boolean startsWith(java.lang.String)>("/"),405,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack10 == 0 goto $stack7 = virtualinvoke trimmed.<java.lang.String: boolean startsWith(java.lang.String)>("/"),405,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)) => Node(<java.lang.String: int indexOf(int,int)>,$stack8 = l4[l5],1559,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack8 = l4[l5], 1559))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)) => Node(<java.lang.String: int indexOf(int,int)>,$stack8 = l4[l5],1559,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack8 = l4[l5], 1559)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2262,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2262))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2262,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2262)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)), SOURCE=>BASE: Node(<spark.staticfiles.StaticFilesFolder: java.lang.String local()>,$stack0 = <spark.staticfiles.StaticFilesFolder: java.lang.String local>,24,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack2 = staticinvoke <spark.staticfiles.StaticFilesFolder: java.lang.String local()>(), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack2 = staticinvoke <spark.staticfiles.StaticFilesFolder: java.lang.String local()>(),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack2 = staticinvoke <spark.staticfiles.StaticFilesFolder: java.lang.String local()>(), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack8 = l1.<java.lang.String: char[] value>,1407,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack8 = l1.<java.lang.String: char[] value>, 1407)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l7 = lengthof $stack8,1407,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l7 = lengthof $stack8, 1407)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack11 = $stack10 - l7,1410,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack11 = $stack10 - l7, 1410))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack9 = l0.<java.lang.String: char[] value>,1410,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack9 = l0.<java.lang.String: char[] value>, 1410)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack10 = lengthof $stack9,1410,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack10 = lengthof $stack9, 1410)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null),62,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null),62,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, "Path must not be null"),76,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, 'Path must not be null'), 76))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, "Path must not be null"),76,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, 'Path must not be null'), 76)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack6 = l0.<java.lang.String: char[] value>,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack6 = l0.<java.lang.String: char[] value>, 1546)) => Node(<java.lang.String: int indexOf(int,int)>,l3 = lengthof $stack6,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l3 = lengthof $stack6, 1546))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack6 = l0.<java.lang.String: char[] value>,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack6 = l0.<java.lang.String: char[] value>, 1546)) => Node(<java.lang.String: int indexOf(int,int)>,l3 = lengthof $stack6,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l3 = lengthof $stack6, 1546)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(), 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack5 = $stack4 - 1,398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack5 = $stack4 - 1, 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l3 = l0.<java.lang.String: char[] value>,1403,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l3 = l0.<java.lang.String: char[] value>, 1403)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack15 = l3[$stack12],1413,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack15 = l3[$stack12], 1413))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack12 = l4,1413,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack12 = l4, 1413)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63),93,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63), 93))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0),1503,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63),93,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63), 93)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = virtualinvoke l2.<java.lang.Class: java.lang.Class getComponentType()>(),2394,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, $stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(), 2393))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = virtualinvoke l2.<java.lang.Class: java.lang.Class getComponentType()>(),2394,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, $stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(), 2393)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)), SOURCE=>BASE: Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack10 == 0 goto $stack7 = virtualinvoke trimmed.<java.lang.String: boolean startsWith(java.lang.String)>("/"),405,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack10 == 0 goto $stack7 = virtualinvoke trimmed.<java.lang.String: boolean startsWith(java.lang.String)>("/"),405,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),103,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 103))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),103,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 103)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(), 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack5 = $stack4 - 1,398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack5 = $stack4 - 1, 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l3 = l0.<java.lang.String: char[] value>,1403,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l3 = l0.<java.lang.String: char[] value>, 1403))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l3 = l0.<java.lang.String: char[] value>,1403,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l3 = l0.<java.lang.String: char[] value>, 1403)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(),2396,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,return $stack1,105,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,return $stack1,105,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack13 = l3[l7],1579,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack13 = l3[l7], 1579))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack13 = l3[l7],1579,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack13 = l3[l7], 1579)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63),93,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63), 93))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0),1503,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63),93,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(63), 93)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,inString := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,$stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString),132,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString), 132))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,inString := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,$stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString),132,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString), 132)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack6 = l0.<java.lang.String: char[] value>,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack6 = l0.<java.lang.String: char[] value>, 1546)) => Node(<java.lang.String: int indexOf(int,int)>,l3 = lengthof $stack6,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l3 = lengthof $stack6, 1546))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack6 = l0.<java.lang.String: char[] value>,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack6 = l0.<java.lang.String: char[] value>, 1546)) => Node(<java.lang.String: int indexOf(int,int)>,l3 = lengthof $stack6,1546,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l3 = lengthof $stack6, 1546)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null),62,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null),62,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, "Path must not be null"),76,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, 'Path must not be null'), 76))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, "Path must not be null"),76,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, staticinvoke <spark.utils.Assert: void notNull(java.lang.Object,java.lang.String)>(path, 'Path must not be null'), 76)), SOURCE=>BASE: Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,return $stack1,105,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,return $stack1,105,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack20 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>(),121,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack20 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>(),121,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack2 != 0 goto $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),397,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack2 != 0 goto $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),397,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = virtualinvoke l2.<java.lang.Class: java.lang.Class getComponentType()>(),2394,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, $stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(), 2393)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0),1503,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0),1503,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(),2396,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack4 = l0.<java.lang.String: char[] value>,1962,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack4 = l0.<java.lang.String: char[] value>, 1962)), SOURCE=>BASE: Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,if $stack3 != 0 goto return,11,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,if $stack3 != 0 goto return,11,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack13 = l3[l7],1579,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack13 = l3[l7], 1579))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack13 = l3[l7],1579,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack13 = l3[l7], 1579)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),96,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 96))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment2),96,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment2), 96)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),96,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 96)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack2 != 0 goto $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),397,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,if $stack2 != 0 goto $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),397,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack20 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>(),121,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack20 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.String toString()>(),121,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2262,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2262)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,$stack5 = virtualinvoke l2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(l1#2),2267,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2262,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2262)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,$stack5 = virtualinvoke l2.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(l1#2),2267,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = virtualinvoke l2.<java.lang.Class: java.lang.Class getComponentType()>(),2394,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, $stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(), 2393)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,$stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(),2393,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, $stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(), 2393))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,$stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(),2393,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, $stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(), 2393)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack17 = l3[$stack16],1578,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack17 = l3[$stack16], 1578))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack17 = l3[$stack16],1578,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack17 = l3[$stack16], 1578)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, $stack6 = staticinvoke <spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>(), 82) => (<spark.utils.ClassUtils: java.lang.ClassLoader getDefaultClassLoader()>, cl = virtualinvoke $stack4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>(), 145) => (<java.lang.Class: java.lang.ClassLoader getClassLoader()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 678)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),103,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 103))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,buf = $stack8,102,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, buf = $stack8, 102)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),103,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 103)), SOURCE=>BASE: Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,if $stack3 != 0 goto return,11,SinkNode, path: )
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,if $stack3 != 0 goto return,11,SinkNode, path: ), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack11 = lengthof l3,1577,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack11 = lengthof l3, 1577))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack11 = lengthof l3,1577,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack11 = lengthof l3, 1577)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(), 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack5 = $stack4 - 1,398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack5 = $stack4 - 1, 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l3 = l0.<java.lang.String: char[] value>,1403,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l3 = l0.<java.lang.String: char[] value>, 1403))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l3 = l0.<java.lang.String: char[] value>,1403,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l3 = l0.<java.lang.String: char[] value>, 1403)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(),2396,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack8 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1969))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack8 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1969)), SOURCE=>BASE: Node(<spark.staticfiles.StaticFilesFolder: java.lang.String local()>,$stack0 = <spark.staticfiles.StaticFilesFolder: java.lang.String local>,24,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack2 = staticinvoke <spark.staticfiles.StaticFilesFolder: java.lang.String local()>(), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack2 = staticinvoke <spark.staticfiles.StaticFilesFolder: java.lang.String local()>(),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack2 = staticinvoke <spark.staticfiles.StaticFilesFolder: java.lang.String local()>(), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack8 = l1.<java.lang.String: char[] value>,1407,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack8 = l1.<java.lang.String: char[] value>, 1407)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l7 = lengthof $stack8,1407,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l7 = lengthof $stack8, 1407)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack11 = $stack10 - l7,1410,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack11 = $stack10 - l7, 1410))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack9 = l0.<java.lang.String: char[] value>,1410,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack9 = l0.<java.lang.String: char[] value>, 1410)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack10 = lengthof $stack9,1410,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack10 = lengthof $stack9, 1410)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0),1503,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,$stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2),1565,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0),1503,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,inString := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,$stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString),132,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString), 132))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack20 = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack18, $stack19), 75)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71)) => Node(<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62)) => Node(<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,inString := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222)) => Node(<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>,$stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString),132,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack7 = staticinvoke <spark.utils.StringUtils: boolean hasLength(java.lang.String)>(inString), 132)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(),2396,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(),2396,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack17 = l3[$stack16],1578,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack17 = l3[$stack16], 1578))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack17 = l3[$stack16],1578,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack17 = l3[$stack16], 1578)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = virtualinvoke l2.<java.lang.Class: java.lang.Class getComponentType()>(),2394,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, $stack7 = virtualinvoke l2.<java.lang.Class: boolean isArray()>(), 2393)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack11 = lengthof l3,1577,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack11 = lengthof l3, 1577))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,$stack11 = lengthof l3,1577,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, $stack11 = lengthof l3, 1577)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack8 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 120)) => Node(<java.lang.Class: java.net.URL getResource(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l2 = l0,2392,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l2 = l0, 2392)) => Node(<java.lang.Class: java.lang.String resolveName(java.lang.String)>,l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(),2396,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120) => (<java.lang.Class: java.net.URL getResource(java.lang.String)>, l1#2 = specialinvoke l0.<java.lang.Class: java.lang.String resolveName(java.lang.String)>(l1), 2261) => (<java.lang.Class: java.lang.String resolveName(java.lang.String)>, l3 = virtualinvoke l2.<java.lang.Class: java.lang.String getName()>(), 2396)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack8 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1969))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: java.lang.String substring(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>(path, '\\', '/'), 222) => (<spark.utils.StringUtils: java.lang.String replace(java.lang.String,java.lang.String,java.lang.String)>, $stack16 = virtualinvoke inString.<java.lang.String: java.lang.String substring(int,int)>(pos, index), 141)) => Node(<java.lang.String: java.lang.String substring(int,int)>,$stack8 = l0.<java.lang.String: char[] value>,1969,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, specialinvoke $stack9.<spark.resource.ClassPathResource: void <init>(java.lang.String)>(addedPath), 71) => (<spark.resource.ClassPathResource: void <init>(java.lang.String)>, specialinvoke this.<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>(path, null), 62) => (<spark.resource.ClassPathResource: void <init>(java.lang.String,java.lang.ClassLoader)>, pathToUse = staticinvoke <spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>(path), 77) => (<spark.utils.StringUtils: java.lang.String cleanPath(java.lang.String)>, prefix = virtualinvoke pathToUse.<java.lang.String: java.lang.String substring(int,int)>(0, $stack38), 231) => (<java.lang.String: java.lang.String substring(int,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1969)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565)) => Node(<java.lang.String: int indexOfSupplementary(int,int)>,l3 = l0.<java.lang.String: char[] value>,1574,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack7 = specialinvoke l0.<java.lang.String: int indexOfSupplementary(int,int)>(l1, l2), 1565) => (<java.lang.String: int indexOfSupplementary(int,int)>, l3 = l0.<java.lang.String: char[] value>, 1574)), SOURCE=>BASE: Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),96,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 96))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment2),96,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, $stack40 = virtualinvoke $stack39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment2), 96)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,$stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1),96,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, $stack41 = virtualinvoke $stack40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(segment1), 96)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)), SOURCE=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),75,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>,segment1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69)) => Node(<java.lang.String: int indexOf(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91)) => Node(<java.lang.String: int indexOf(int,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503)) => Node(<java.lang.String: int indexOf(int,int)>,l4 = l0.<java.lang.String: char[] value>,1557,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, l4 = l0.<java.lang.String: char[] value>, 1557)), SOURCE=>BASE: Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack4 = virtualinvoke trimmed.<java.lang.String: int length()>(), 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack5 = $stack4 - 1,398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack5 = $stack4 - 1, 398)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l3 = l0.<java.lang.String: char[] value>,1403,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l3 = l0.<java.lang.String: char[] value>, 1403)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack15 = l3[$stack12],1413,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack15 = l3[$stack12], 1413))
SINK=>BASE: Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack2 = l0.<java.lang.String: char[] value>,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack2 = l0.<java.lang.String: char[] value>, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack5 = lengthof $stack2,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack5 = lengthof $stack2, 1449)) => Node(<java.lang.String: boolean endsWith(java.lang.String)>,$stack6 = $stack5 - $stack4,1449,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack14 = virtualinvoke path#2.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 84) => (<java.lang.String: boolean endsWith(java.lang.String)>, $stack6 = $stack5 - $stack4, 1449)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,l4 = l2,1404,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, l4 = l2, 1404)) => Node(<java.lang.String: boolean startsWith(java.lang.String,int)>,$stack12 = l4,1413,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63) => (<java.lang.String: boolean startsWith(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0), 1434) => (<java.lang.String: boolean startsWith(java.lang.String,int)>, $stack12 = l4, 1413))]
Confluence interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Confluence flows from execution of lines 73 and 73 to line 69, defined in $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>() and $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>() and used in addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 69 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, addedPath = staticinvoke <spark.resource.ClassPathResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>($stack7, path#2), 69) => (<spark.resource.AbstractResourceHandler: java.lang.String addPaths(java.lang.String,java.lang.String)>, split = virtualinvoke segment1.<java.lang.String: int indexOf(int)>(59), 91) => (<java.lang.String: int indexOf(int)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(int,int)>(l1, 0), 1503) => (<java.lang.String: int indexOf(int,int)>, $stack8 = l4[l5], 1559)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/d8f6320e4c6d98ce16ebc33f07700bee9a95ae24/original-without-dependencies/spark-core-2.5.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,68000
Runtime: 0.049s
Time to perform OA Inter 0,91900
OA Inter Visited methods: 83
 Analysis results
----------------------------
 Number of conflicts: 7
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/d8f6320e4c6d98ce16ebc33f07700bee9a95ae24/original-without-dependencies/spark-core-2.5.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,40100
Time to perform DFP Inter 1,33700
Depth limit: 5
CONFLICTS: DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7),120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack8.<java.lang.Class: java.net.URL getResource(java.lang.String)>($stack7), 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,119,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 119)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if $stack2 == null goto $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,119,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>, 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3),122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3), 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResource: boolean exists()>,return $stack6,124,SinkNode, path: ))]
Visited methods: 59
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/d8f6320e4c6d98ce16ebc33f07700bee9a95ae24/original-without-dependencies/spark-core-2.5.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,44700
Time to perform DFP Inter 1,45000
Depth limit: 5
CONFLICTS: DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/")
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 75, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 75 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in trimmed = string
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/")
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\")
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 75, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 75 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in trimmed = string
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>()
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\")
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 86, defined in $stack6 = 0 and propagated in $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>()
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)
Caused by line 86 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 86)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2)
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11)
DF interference in <spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>
Data flows from execution of line 73 to 83, defined in $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path> and propagated in $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>()
Caused by line 73 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)
Caused by line 83 flow: path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)
[List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),86,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 86))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("\\"),405,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack10 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('\\'), 405))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3),122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3), 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>,119,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack2 = this.<spark.resource.ClassPathResource: java.lang.Class clazz>, 119)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if $stack2 == null goto $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,119,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<java.lang.String: boolean startsWith(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: boolean startsWith(java.lang.String,int)>(l1, 0),1434,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack5 = virtualinvoke path.<java.lang.String: boolean startsWith(java.lang.String)>('/'), 63)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,$stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2),11,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack3 = virtualinvoke $stack1.<java.lang.String: boolean startsWith(java.lang.String)>($stack2), 11))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack4 = this.<spark.resource.ClassPathResource: java.lang.ClassLoader classLoader>, 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3),122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, url = virtualinvoke $stack4.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>($stack3), 122)) => Node(<spark.resource.ClassPathResource: boolean exists()>,if url == null goto $stack6 = 0,124,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,$stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>("/"),397,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11) => (<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>, $stack2 = virtualinvoke trimmed.<java.lang.String: boolean endsWith(java.lang.String)>('/'), 397))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int)>(1),402,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack6 = 0,124,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResource: boolean exists()>,return $stack6,124,SinkNode, path: )), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75))), List(Node(<spark.resource.ClassPathResource: boolean exists()>,$stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>,120,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack7 = this.<spark.resource.ClassPathResource: java.lang.String path>, 120)) => Node(<spark.resource.ClassPathResource: boolean exists()>,$stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>,122,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73) => (<spark.resource.ClassPathResource: boolean exists()>, $stack3 = this.<spark.resource.ClassPathResource: java.lang.String path>, 122)) => Node(<spark.resource.ClassPathResource: java.lang.String getPath()>,$stack1 = this.<spark.resource.ClassPathResource: java.lang.String path>,105,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack18 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack13 = virtualinvoke resource.<spark.resource.ClassPathResource: java.lang.String getPath()>(), 83)) => Node(<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>,path := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,string := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = string,395,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)) => Node(<spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>,trimmed = virtualinvoke trimmed.<java.lang.String: java.lang.String substring(int,int)>(0, $stack5),398,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83) => (<spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>, $stack1 = staticinvoke <spark.utils.StringUtils: java.lang.String removeLeadingAndTrailingSlashesFrom(java.lang.String)>(path), 11)))]
Visited methods: 59
 Analysis results
----------------------------
 Number of conflicts: 21
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/d8f6320e4c6d98ce16ebc33f07700bee9a95ae24/original-without-dependencies/spark-core-2.5.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,45400
Time to perform PDG 0,61800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/spark/d8f6320e4c6d98ce16ebc33f07700bee9a95ae24/original-without-dependencies/spark-core-2.5.3-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,41400
Time to perform PDG 0,51700
CONFLICTS: [List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>,74,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>, 74)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack16 == null goto resource = null,74,SimpleNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,resource = $stack17,75,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, resource = $stack17, 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),86,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 86)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack11 == 0 goto return null,86,SinkNode, path: )), List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: )), List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>,74,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>, 74)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack16 == null goto resource = null,74,SimpleNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,resource = $stack17,75,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, resource = $stack17, 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),86,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack11 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 86)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack11 == 0 goto return null,86,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13),83,SinkNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, staticinvoke <spark.staticfiles.DirectoryTraversal: void protectAgainstInClassPath(java.lang.String)>($stack13), 83))), List(Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(),73,SourceNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack10 = virtualinvoke resource.<spark.resource.ClassPathResource: boolean exists()>(), 73)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack10 == 0 goto (branch),73,SourceNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack14 == 0 goto (branch),84,SinkNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,$stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>,74,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, $stack16 = this.<spark.resource.ClassPathResourceHandler: java.lang.String welcomeFile>, 74)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if $stack16 == null goto resource = null,74,SimpleNode, path: ) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,resource = $stack17,75,SimpleNode, path: (<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>, resource = $stack17, 75)) => Node(<spark.resource.ClassPathResourceHandler: spark.resource.AbstractFileResolvingResource getResource(java.lang.String)>,if resource == null goto return null,82,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
