Running soot scenario jopt-simple;joptsimple.internal.Columns;piecesOfEmbeddedLine(String, int);257ac04e6ceefb074788b8c35a8e0287f0af6bef
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jopt-simple/257ac04e6ceefb074788b8c35a8e0287f0af6bef/original-without-dependencies/jopt-simple-5.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,41100
Time to perform Confluence 1 Inter 0,51700
Configure Soot Confluence 2 Inter 0,13900
Time to perform Confluence 2 Inter 0,14700
Visited methods: 16
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack17 = new java.lang.StringBuilder,99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18), 99)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack14 = virtualinvoke augmented.<java.lang.StringBuilder: java.lang.String toString()>(),98,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack14 = virtualinvoke augmented.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\s+$', ''), 98)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\s+$', ''), 98) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack14 = virtualinvoke augmented.<java.lang.StringBuilder: java.lang.String toString()>(),98,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack14 = virtualinvoke augmented.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\s+$', ''), 98)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0),2223,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\s+$', ''), 98) => (<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(l0), 2223)) => Node(<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>,$stack5 = virtualinvoke $stack4.<java.util.regex.Matcher: java.lang.String replaceAll(java.lang.String)>(l2),2223,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\s+$', ''), 98)), SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack17 = new java.lang.StringBuilder,99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18), 99)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack13 = virtualinvoke nextPiece.<java.lang.StringBuilder: int length()>(),86,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, $stack13 = virtualinvoke nextPiece.<java.lang.StringBuilder: int length()>(), 86))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack13 = virtualinvoke nextPiece.<java.lang.StringBuilder: int length()>(),86,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, $stack13 = virtualinvoke nextPiece.<java.lang.StringBuilder: int length()>(), 86)), SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack17 = new java.lang.StringBuilder,99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18), 99)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)), SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack17 = new java.lang.StringBuilder,99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18), 99)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)), SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack17 = new java.lang.StringBuilder,99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18), 99)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack14 = virtualinvoke augmented.<java.lang.StringBuilder: java.lang.String toString()>(),98,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack14 = virtualinvoke augmented.<java.lang.StringBuilder: java.lang.String toString()>(), 98)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\s+$", ""),98,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\s+$', ''), 98))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,pieces := @parameter5: java.util.List,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,interfaceinvoke pieces.<java.util.List: boolean add(java.lang.Object)>($stack15),98,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, interfaceinvoke pieces.<java.util.List: boolean add(java.lang.Object)>($stack15), 98)), SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack17 = new java.lang.StringBuilder,99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18), 99)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack14 = virtualinvoke nextPiece.<java.lang.StringBuilder: java.lang.String toString()>(),87,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, $stack14 = virtualinvoke nextPiece.<java.lang.StringBuilder: java.lang.String toString()>(), 87))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,interfaceinvoke pieces.<java.util.List: boolean add(java.lang.Object)>($stack14),87,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, interfaceinvoke pieces.<java.util.List: boolean add(java.lang.Object)>($stack14), 87)), SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack11 = virtualinvoke word.<java.lang.String: int length()>(), 97)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack11 = virtualinvoke word.<java.lang.String: int length()>(), 97) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)) => Node(<java.lang.String: int length()>,$stack2 = lengthof $stack1,623,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack11 = virtualinvoke word.<java.lang.String: int length()>(), 97)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack11 = virtualinvoke word.<java.lang.String: int length()>(),97,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack11 = virtualinvoke word.<java.lang.String: int length()>(), 97)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack12 = $stack10 + $stack11,97,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack12 = $stack10 + $stack11, 97))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack10 = virtualinvoke augmented.<java.lang.StringBuilder: int length()>(),97,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack10 = virtualinvoke augmented.<java.lang.StringBuilder: int length()>(), 97)), SOURCE=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(),77,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,start = virtualinvoke words.<java.text.BreakIterator: int first()>(),82,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, start = virtualinvoke words.<java.text.BreakIterator: int first()>(), 82)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,start := @parameter2: int,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end),96,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, word = virtualinvoke source.<java.lang.String: java.lang.String substring(int,int)>(start, end), 96)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,$stack17 = new java.lang.StringBuilder,99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, specialinvoke $stack17.<java.lang.StringBuilder: void <init>(java.lang.String)>($stack18), 99)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),99,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,virtualinvoke augmented.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),102,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, virtualinvoke augmented.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word), 102))
SINK=>BASE: Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,$stack8 = new java.util.ArrayList,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,pieces = $stack8,75,SourceNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, pieces = $stack8, 75)) => Node(<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>,nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces),84,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,nextPiece := @parameter1: java.lang.StringBuilder,-1,SimpleNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,augmented = nextPiece,94,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84)) => Node(<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>,virtualinvoke augmented.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word),102,SinkNode, path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, virtualinvoke augmented.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(word), 102))]
Confluence interference in <joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>
Confluence flows from execution of lines 77 and 75 to line 84, defined in words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>() and specialinvoke $stack8.<java.util.ArrayList: void <init>()>() and used in nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces)
Caused by line 77 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)
Caused by line 75 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)
Caused by line 84 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, nextPiece = specialinvoke this.<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>(line, nextPiece, start, end, width, pieces), 84) => (<joptsimple.internal.Columns: java.lang.StringBuilder processNextWord(java.lang.String,java.lang.StringBuilder,int,int,int,java.util.List)>, $stack15 = virtualinvoke $stack14.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>('\\s+$', ''), 98)
Confluence interference in <joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>
Confluence flows from execution of lines 77 and 75 to line 86, defined in words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>() and specialinvoke $stack8.<java.util.ArrayList: void <init>()>() and used in $stack13 = virtualinvoke nextPiece.<java.lang.StringBuilder: int length()>()
Caused by line 77 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)
Caused by line 75 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)
Caused by line 86 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, $stack13 = virtualinvoke nextPiece.<java.lang.StringBuilder: int length()>(), 86)
Confluence interference in <joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>
Confluence flows from execution of lines 77 and 75 to line 87, defined in words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>() and specialinvoke $stack8.<java.util.ArrayList: void <init>()>() and used in interfaceinvoke pieces.<java.util.List: boolean add(java.lang.Object)>($stack14)
Caused by line 77 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, words = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>(), 77)
Caused by line 75 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, specialinvoke $stack8.<java.util.ArrayList: void <init>()>(), 75)
Caused by line 87 flow: path: (<joptsimple.internal.Columns: java.util.List piecesOfEmbeddedLine(java.lang.String,int)>, interfaceinvoke pieces.<java.util.List: boolean add(java.lang.Object)>($stack14), 87)
 Analysis results
----------------------------
 Number of conflicts: 8
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jopt-simple/257ac04e6ceefb074788b8c35a8e0287f0af6bef/original-without-dependencies/jopt-simple-5.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,52100
Runtime: 0.013s
Time to perform OA Inter 0,58800
OA Inter Visited methods: 1
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jopt-simple/257ac04e6ceefb074788b8c35a8e0287f0af6bef/original-without-dependencies/jopt-simple-5.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,40300
Time to perform DFP Inter 0,39400
Depth limit: 5
CONFLICTS: []
Visited methods: 8
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jopt-simple/257ac04e6ceefb074788b8c35a8e0287f0af6bef/original-without-dependencies/jopt-simple-5.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,49700
Time to perform DFP Inter 0,37700
Depth limit: 5
CONFLICTS: []
Visited methods: 8
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jopt-simple/257ac04e6ceefb074788b8c35a8e0287f0af6bef/original-without-dependencies/jopt-simple-5.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,36600
Time to perform PDG 0,32800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/jopt-simple/257ac04e6ceefb074788b8c35a8e0287f0af6bef/original-without-dependencies/jopt-simple-5.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,39500
Time to perform PDG 0,35500
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
