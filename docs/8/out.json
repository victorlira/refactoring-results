[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack18 = virtualinvoke $stack15.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack17),635,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack18 = virtualinvoke $stack15.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack17), 635)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,virtualinvoke $stack18.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(),635,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, virtualinvoke $stack18.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 635)) SINK=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack18 = virtualinvoke $stack15.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack17),635,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack18 = virtualinvoke $stack15.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack17), 635))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 635
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 635
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 635
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack18.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
					"line": 635
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.RuntimeException: void <init>()>,specialinvoke l0.<java.lang.Exception: void <init>()>(),51,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.RuntimeException: void <init>()>,specialinvoke l0.<java.lang.Exception: void <init>()>(),51,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": 51
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": 51
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Exception: void <init>()>()",
				"location": {
					"file": "",
					"class": "java.lang.RuntimeException",
					"method": "<java.lang.RuntimeException: void <init>()>",
					"line": 51
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
					"line": 1235
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack4 = lengthof $stack3,1929,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, $stack4 = lengthof $stack3, 1929)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>("."),1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack19 = $stack18 + 1,1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack19 = $stack18 + 1, 1312)) => Node(<java.lang.String: java.lang.String substring(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,l2 = $stack4 - l1,1929,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, l2 = $stack4 - l1, 1929))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = lengthof $stack3",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1929
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = l0.<java.lang.Class: java.lang.String name>,640,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 640
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 640
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = l0.<java.lang.Class: java.lang.String name>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getName()>",
					"line": 640
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974)) => Node(<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>,specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3),2351,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>",
	"line": 2351
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>",
	"line": 2351
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>",
					"line": 2351
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack1,210,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack1, 210)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>,$stack1 = new org.rendersnake.error.RenderException,58,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack1,210,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack1, 210))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
					"line": 58
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
	"line": 58
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 210
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 210
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack1",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>()>",
					"line": 210
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,groupCover = l14[l16],562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, groupCover = l14[l16], 562)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l1 := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack2 = interfaceinvoke l1.<java.lang.CharSequence: java.lang.String toString()>(), 2133)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,$stack2 = interfaceinvoke l1.<java.lang.CharSequence: java.lang.String toString()>(),2133,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack2 = interfaceinvoke l1.<java.lang.CharSequence: java.lang.String toString()>(), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0),1698,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l14 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.String[] coveredByGroups()>(),565,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l14 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.String[] coveredByGroups()>(), 565)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,groupCover = l14[l16],562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, groupCover = l14[l16], 562)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l1 := @parameter0: java.lang.CharSequence,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack2 = interfaceinvoke l1.<java.lang.CharSequence: java.lang.String toString()>(), 2133)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,$stack2 = interfaceinvoke l1.<java.lang.CharSequence: java.lang.String toString()>(),2133,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack2 = interfaceinvoke l1.<java.lang.CharSequence: java.lang.String toString()>(), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack6 = l1.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack6 = l1.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2),1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0),1698,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l14 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.String[] coveredByGroups()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 565
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 565
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": 2133
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": 1698
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "groupCover = l14[l16]",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": 2133
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": 1698
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(java.lang.String)>",
					"line": 1698
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack8 = $stack7 - 1,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,popped = (java.lang.String) $stack9,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,$stack27 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(),588,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack27 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(), 588)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack27 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
					"line": 588
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 588
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
					"line": 251
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 982
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3), 1807)) => Node(<java.lang.String: int lastIndexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1827,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3), 1807) => (<java.lang.String: int lastIndexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1827)) => Node(<java.lang.String: int lastIndexOf(java.lang.String,int)>,$stack9 = staticinvoke <java.lang.String: int lastIndexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2),1827,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312) => (<java.lang.String: int lastIndexOf(java.lang.String)>, $stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3), 1807)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String,int)>",
	"line": 1827
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String,int)>",
	"line": 1827
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
					"line": 1807
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2492
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2492
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
					"line": 2492
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>(l1),2701,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>(l1), 2701)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l2 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Method[] filterMethods(java.lang.Class,java.lang.reflect.Method[])>(l0, $stack5),2701,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>(l1),2701,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods0(boolean)>(l1), 2701))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2701
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2701
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2701
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = staticinvoke <sun.reflect.Reflection: java.lang.reflect.Method[] filterMethods(java.lang.Class,java.lang.reflect.Method[])>(l0, $stack5)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
					"line": 2701
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "className#29 = exception#26[l6]",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 582
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2381,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2381))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2381
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2381
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack11 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2381
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
					"line": 1277
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1),1238,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277) => (<java.lang.Class: java.lang.Class getDeclaringClass()>, specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1), 1238)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass0()>(),1235,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277)) => Node(<java.lang.Class: java.lang.Class getDeclaringClass()>,specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1),1238,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(), 1277) => (<java.lang.Class: java.lang.Class getDeclaringClass()>, specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1), 1238))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1238
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1235
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
	"line": 1238
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l1.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack4, 1)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getDeclaringClass()>",
					"line": 1238
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/testng/annotations/Test;"),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;'), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack72 = (org.testng.annotations.Test) $stack71,564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack72 = (org.testng.annotations.Test) $stack71, 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack3 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack3 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack7 = lengthof $stack3,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack7 = lengthof $stack3, 1718)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2),1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 564
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;')",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 564
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
					"line": 1718
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack79 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),565,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack79 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 565)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,$stack27 = l0[l9],1776,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718) => (<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>, $stack27 = l0[l9], 1776)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,$stack27 = l0[l9],1776,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718) => (<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>, $stack27 = l0[l9], 1776))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 564
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": 1776
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 565
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": 1776
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack27 = l0[l9]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
					"line": 1776
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(),1307,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>(), 1307))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1307
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack22 = virtualinvoke l0.<java.lang.Class: java.lang.Class getComponentType()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1307
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>,$stack1 = new org.rendersnake.error.RenderException,58,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Exception: void <init>()>,specialinvoke l0.<java.lang.Throwable: void <init>()>(),54,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Exception: void <init>()>,specialinvoke l0.<java.lang.Throwable: void <init>()>(),54,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": 54
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
					"line": 58
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
	"line": 58
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": 54
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: void <init>()>()",
				"location": {
					"file": "",
					"class": "java.lang.Exception",
					"method": "<java.lang.Exception: void <init>()>",
					"line": 54
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack79 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),565,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack79 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 565)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,$stack20 = l0[l10],1784,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718) => (<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>, $stack20 = l0[l10], 1784)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/testng/annotations/Test;"),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;'), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack72 = (org.testng.annotations.Test) $stack71,564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack72 = (org.testng.annotations.Test) $stack71, 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,$stack20 = l0[l10],1784,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718) => (<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>, $stack20 = l0[l10], 1784))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": 1784
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 565
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": 1784
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack20 = l0[l10]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
					"line": 1784
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2695,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>,2702,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l2 = $stack12,2697,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l0 := @parameter0: java.lang.reflect.Method[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,$stack4 = lengthof l0,3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975) => (<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l1 = newarray (java.lang.reflect.Method)[$stack4],3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2695
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2702
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2697
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 980
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 980
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = l1 instanceof java.lang.String",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 980
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
					"line": 1272
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3,784,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3, 784))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 784
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 784
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace> = $stack3",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 784
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1311
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,specialinvoke l2.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack8, 1),1288,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, specialinvoke l2.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack8, 1), 1288)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,specialinvoke l2.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack8, 1),1288,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, specialinvoke l2.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack8, 1), 1288))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1288
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1288
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l2.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>($stack8, 1)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
					"line": 1288
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>,$stack1 = new org.rendersnake.error.RenderException,58,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,specialinvoke l0.<java.lang.Object: void <init>()>(),249,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, specialinvoke l0.<java.lang.Object: void <init>()>(), 249)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,specialinvoke l0.<java.lang.Object: void <init>()>(),249,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, specialinvoke l0.<java.lang.Object: void <init>()>(), 249))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 249
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
					"line": 58
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
	"line": 58
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 249
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Object: void <init>()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>()>",
					"line": 249
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),848,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 848
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 848
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack8 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 848
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>,$stack1 = new org.rendersnake.error.RenderException,58,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack2,227,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack2, 227)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>,$stack1 = new org.rendersnake.error.RenderException,58,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack2,227,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack2, 227))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
					"line": 58
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
	"line": 58
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 227
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
					"line": 58
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
	"line": 58
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 227
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.util.List suppressedExceptions> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>()>",
					"line": 227
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2695,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>,2702,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l2 = $stack12,2697,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l0 := @parameter0: java.lang.reflect.Method[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,$stack4 = lengthof l0,3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975) => (<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l1 = newarray (java.lang.reflect.Method)[$stack4],3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0),2371,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0), 2371))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2695
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2702
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2697
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2371
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2371
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2371
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l1 = $stack2,642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>("."),1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack19 = $stack18 + 1,1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack19 = $stack18 + 1, 1312)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>("."),1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack19 = $stack18 + 1,1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack19 = $stack18 + 1, 1312))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack19 = $stack18 + 1",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1312
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack13 = (java.lang.Class$ReflectionData) $stack12,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack13 = (java.lang.Class$ReflectionData) $stack12, 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l3 = $stack13,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),845,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),845,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 845
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 845
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 845
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack79 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),565,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack79 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 565)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0),1698,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,$stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2),2133,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0),1698,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,$stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2),2133,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 564
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": 1698
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": 2133
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 565
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": 1698
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": 2133
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
					"line": 2133
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.String: java.lang.String substring(int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack3 = l0.<java.lang.String: char[] value>,1929,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, $stack3 = l0.<java.lang.String: char[] value>, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,$stack4 = lengthof $stack3,1929,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, $stack4 = lengthof $stack3, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,l2 = $stack4 - l1,1929,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, l2 = $stack4 - l1, 1929)) => Node(<java.lang.String: java.lang.String substring(int)>,specialinvoke $stack5.<java.lang.String: void <init>(char[],int,int)>($stack6, l1, l2),1933,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, specialinvoke $stack5.<java.lang.String: void <init>(char[],int,int)>($stack6, l1, l2), 1933)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(),1311,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.String getName()>(), 1311)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.String: int lastIndexOf(java.lang.String)>,$stack4 = virtualinvoke l0.<java.lang.String: int lastIndexOf(java.lang.String,int)>(l1, $stack3),1807,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>("."),1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack18 = virtualinvoke l1.<java.lang.String: int lastIndexOf(java.lang.String)>('.'), 1312)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack19 = $stack18 + 1,1312,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack19 = $stack18 + 1, 1312)) => Node(<java.lang.String: java.lang.String substring(int)>,l1 := @parameter0: int,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448)) => Node(<java.lang.String: java.lang.String substring(int)>,specialinvoke $stack5.<java.lang.String: void <init>(char[],int,int)>($stack6, l1, l2),1933,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, $stack7 = virtualinvoke $stack4.<java.lang.String: java.lang.String substring(int)>($stack6), 1448) => (<java.lang.String: java.lang.String substring(int)>, specialinvoke $stack5.<java.lang.String: void <init>(char[],int,int)>($stack6, l1, l2), 1933))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1311
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int lastIndexOf(java.lang.String)>",
	"line": 1807
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1312
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1929
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String substring(int)>",
	"line": 1933
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack5.<java.lang.String: void <init>(char[],int,int)>($stack6, l1, l2)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String substring(int)>",
					"line": 1933
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack13 = (java.lang.Class$ReflectionData) $stack12,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack13 = (java.lang.Class$ReflectionData) $stack12, 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l3 = $stack13,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack13 = (java.lang.Class$ReflectionData) $stack12,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack13 = (java.lang.Class$ReflectionData) $stack12, 2520))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = $stack13",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
					"line": 2520
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack13 = (java.lang.Class$ReflectionData) $stack12,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack13 = (java.lang.Class$ReflectionData) $stack12, 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l3 = $stack13,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack14 = l3.<java.lang.Class$ReflectionData: int redefinedCount>,2524,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack14 = l3.<java.lang.Class$ReflectionData: int redefinedCount>, 2524)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack13 = (java.lang.Class$ReflectionData) $stack12,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack13 = (java.lang.Class$ReflectionData) $stack12, 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l3 = $stack13,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack14 = l3.<java.lang.Class$ReflectionData: int redefinedCount>,2524,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack14 = l3.<java.lang.Class$ReflectionData: int redefinedCount>, 2524))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2524
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2524
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack14 = l3.<java.lang.Class$ReflectionData: int redefinedCount>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
					"line": 2524
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(),1443,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": 1443
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
					"line": 1443
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces> = l2,853,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces> = l2, 853)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces> = l2,853,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces> = l2, 853))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 853
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 853
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces> = l2",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 853
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2363
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(),2363,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, l4 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2363)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4),2365,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4), 2365))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2365
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2363
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2365
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean needsPackageAccessCheck(java.lang.ClassLoader,java.lang.ClassLoader)>(l1, l4)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2365
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(),856,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, $stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(), 856)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack5 = (java.lang.Class[]) $stack4,856,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(),856,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, $stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(), 856))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = (java.lang.Class[]) $stack4",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 856
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[FAILED TEST]"),633,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[FAILED TEST]'), 633)) SINK=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[FAILED TEST]"),633,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[FAILED TEST]'), 633))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 633
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 633
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[FAILED TEST]')",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
					"line": 633
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[FAILED TEST]"),633,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[FAILED TEST]'), 633)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(),634,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 634)) SINK=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[FAILED TEST]"),633,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[FAILED TEST]'), 633)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(),634,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 634))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 633
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 634
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 633
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 634
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
					"line": 634
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(),1072,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272) => (<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(), 1072)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,specialinvoke $stack3.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(l1, null),1076,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272) => (<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>, specialinvoke $stack3.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(l1, null), 1076)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(),1072,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272) => (<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(), 1072)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,specialinvoke $stack3.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(l1, null),1076,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272) => (<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>, specialinvoke $stack3.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(l1, null), 1076))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": 1072
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": 1076
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": 1072
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": 1076
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack3.<java.lang.Class$EnclosingMethodInfo: void <init>(java.lang.Object[],java.lang.Class$1)>(l1, null)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
					"line": 1076
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>,$stack1 = new org.rendersnake.error.RenderException,58,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,l0.<java.lang.Throwable: java.lang.Throwable cause> = l0,197,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, l0.<java.lang.Throwable: java.lang.Throwable cause> = l0, 197))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
					"line": 58
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
	"line": 58
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 197
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 197
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Throwable: java.lang.Throwable cause> = l0",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>()>",
					"line": 197
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/testng/annotations/Test;"),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;'), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack72 = (org.testng.annotations.Test) $stack71,564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack72 = (org.testng.annotations.Test) $stack71, 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,$stack14 = l0[l9],1771,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718) => (<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>, $stack14 = l0[l9], 1771)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lorg/testng/annotations/Test;"),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;'), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack72 = (org.testng.annotations.Test) $stack71,564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack72 = (org.testng.annotations.Test) $stack71, 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73),564,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)) => Node(<java.lang.String: boolean contains(java.lang.CharSequence)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530)) => Node(<java.lang.String: int indexOf(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698)) => Node(<java.lang.String: int indexOf(java.lang.String,int)>,$stack8 = l0.<java.lang.String: char[] value>,1718,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack8 = l0.<java.lang.String: char[] value>, 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,l0 := @parameter0: char[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718)) => Node(<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>,$stack14 = l0[l9],1771,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack142 = virtualinvoke exception.<java.lang.String: boolean contains(java.lang.CharSequence)>('Skip'), 530) => (<java.lang.String: boolean contains(java.lang.CharSequence)>, $stack3 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String)>($stack2), 2133) => (<java.lang.String: int indexOf(java.lang.String)>, $stack2 = virtualinvoke l0.<java.lang.String: int indexOf(java.lang.String,int)>(l1, 0), 1698) => (<java.lang.String: int indexOf(java.lang.String,int)>, $stack9 = staticinvoke <java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>($stack8, 0, $stack7, $stack6, 0, $stack5, l2), 1718) => (<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>, $stack14 = l0[l9], 1771))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": 1771
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;')",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 564
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 564
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean contains(java.lang.CharSequence)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(java.lang.String,int)>",
	"line": 1718
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
	"line": 1771
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack14 = l0[l9]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: int indexOf(char[],int,int,char[],int,int,int)>",
					"line": 1771
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack13 = (java.lang.Class$ReflectionData) $stack12,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack13 = (java.lang.Class$ReflectionData) $stack12, 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l3 = $stack13,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l3 = $stack10,2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack11 = l3.<java.lang.Class$ReflectionData: int redefinedCount>,2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack11 = l3.<java.lang.Class$ReflectionData: int redefinedCount>, 2503))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2492
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
					"line": 2503
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1),1974,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1),1974,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1974
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1974
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
					"line": 1974
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),250,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: void <init>()>,virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(),250,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 250
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": 250
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>()",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: void <init>()>",
					"line": 250
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.String getName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529)) => Node(<java.lang.Class: java.lang.String getName()>,$stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(),642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529) => (<java.lang.Class: java.lang.String getName()>, $stack2 = specialinvoke l0.<java.lang.Class: java.lang.String getName0()>(), 642)) => Node(<java.lang.Class: java.lang.String getName()>,l0.<java.lang.Class: java.lang.String name> = $stack2,642,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception = virtualinvoke $stack140.<java.lang.Class: java.lang.String getName()>(), 529) => (<java.lang.Class: java.lang.String getName()>, l0.<java.lang.Class: java.lang.String name> = $stack2, 642))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getName()>",
	"line": 642
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l0.<java.lang.Class: java.lang.String name> = $stack2",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getName()>",
					"line": 642
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(),1072,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272) => (<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(), 1072)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(),1072,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272) => (<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>(), 1072))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": 1072
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
	"line": 1072
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.Object[] getEnclosingMethod0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>",
					"line": 1072
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>,786,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>, 786))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 786
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 786
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = l0.<java.lang.Throwable: java.lang.Object backtrace>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 786
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 985
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 985
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l2.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 985
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l3 = $stack10,2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2492,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>, 2492)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack9 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack10 = (java.lang.Class$ReflectionData) $stack9,2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack10 = (java.lang.Class$ReflectionData) $stack9, 2497)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l3 = $stack10,2497,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2492
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2492
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2497
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = $stack10",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
					"line": 2497
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
					"line": 2517
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(),1306,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, $stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>(), 1306))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1306
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1306
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack4 = virtualinvoke l0.<java.lang.Class: boolean isArray()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1306
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>,781,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, $stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>, 781))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 781
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 781
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Throwable: java.lang.StackTraceElement[] stackTrace>",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 781
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = l0.<java.lang.Class: int classRedefinedCount>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
					"line": 2493
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(),1309,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": 1309
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.String getSimpleName()>",
					"line": 1309
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[SKIPPED TEST]"),625,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) SINK=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[SKIPPED TEST]"),625,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>,virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(),625,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
	"line": 625
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
	"line": 625
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
	"line": 625
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]')",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
					"line": 625
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 852
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack8 = $stack7 - 1,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,popped = (java.lang.String) $stack9,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,$stack22 = interfaceinvoke method.<java.util.Iterator: java.lang.Object next()>(),595,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack22 = interfaceinvoke method.<java.util.Iterator: java.lang.Object next()>(), 595)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,method = (org.testng.ITestNGMethod) $stack22,595,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, method = (org.testng.ITestNGMethod) $stack22, 595)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,$stack23 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(),596,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack23 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(), 596)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack8 = l0.<java.lang.String: char[] value>,982,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack8 = l0.<java.lang.String: char[] value>, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = lengthof $stack8,982,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l3 = lengthof $stack8, 982)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l3 = l3 + -1,987,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack12 = l3,987,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack12 = l3, 987))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack22 = interfaceinvoke method.<java.util.Iterator: java.lang.Object next()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
					"line": 595
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 595
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 595
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 596
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
					"line": 251
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 982
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 987
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = l3 + -1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 987
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>,$stack1 = new org.rendersnake.error.RenderException,58,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783)) SINK=>BASE: Node(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>,$stack3 = new org.rendersnake.error.RenderException,48,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)) => Node(<org.rendersnake.error.RenderException: void <init>()>,this := @this: org.rendersnake.error.RenderException,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237) => (<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)) => Node(<java.lang.RuntimeException: void <init>()>,l0 := @this: java.lang.RuntimeException,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)) => Node(<java.lang.Exception: void <init>()>,l0 := @this: java.lang.Exception,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51)) => Node(<java.lang.Throwable: void <init>()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250)) => Node(<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>,specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0),783,SinkNode, path: (<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18) => (<java.lang.RuntimeException: void <init>()>, specialinvoke l0.<java.lang.Exception: void <init>()>(), 51) => (<java.lang.Exception: void <init>()>, specialinvoke l0.<java.lang.Throwable: void <init>()>(), 54) => (<java.lang.Throwable: void <init>()>, virtualinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>(), 250) => (<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>, specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0), 783))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
					"line": 48
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
	"line": 48
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 783
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack1 = new org.rendersnake.error.RenderException",
				"location": {
					"file": "",
					"class": "org.rendersnake.error.RenderException",
					"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
					"line": 58
				},
				"stackTrace": [{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
	"line": 58
},{
	"class": "org.rendersnake.error.RenderException",
	"method": "<org.rendersnake.error.RenderException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.RuntimeException",
	"method": "<java.lang.RuntimeException: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Exception",
	"method": "<java.lang.Exception: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: void <init>()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": -1
},{
	"class": "java.lang.Throwable",
	"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
	"line": 783
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke l0.<java.lang.Throwable: java.lang.Throwable fillInStackTrace(int)>(0)",
				"location": {
					"file": "",
					"class": "java.lang.Throwable",
					"method": "<java.lang.Throwable: java.lang.Throwable fillInStackTrace()>",
					"line": 783
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = l3",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
					"line": 1284
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack10 = lengthof $stack9,983,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack10 = lengthof $stack9, 983)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 983
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 983
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 983
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = lengthof $stack9",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 983
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(),2378,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(),852,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = specialinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces0()>(), 852)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(),856,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, $stack4 = virtualinvoke l2.<java.lang.Object: java.lang.Object clone()>(), 856)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,$stack5 = (java.lang.Class[]) $stack4,856,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(),2378,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(l1, $stack12),2378,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, staticinvoke <sun.reflect.misc.ReflectUtil: void checkProxyPackageAccess(java.lang.ClassLoader,java.lang.Class[])>(l1, $stack12), 2378))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 852
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 856
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2378
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2378
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2378
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2378
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>,576,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>,this := @this: org.rendersnake.HtmlCanvas,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,this := @this: org.rendersnake.HtmlCanvas,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack8 = $stack7 - 1,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,popped = (java.lang.String) $stack9,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,$stack22 = interfaceinvoke method.<java.util.Iterator: java.lang.Object next()>(),595,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack22 = interfaceinvoke method.<java.util.Iterator: java.lang.Object next()>(), 595)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,method = (org.testng.ITestNGMethod) $stack22,595,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, method = (org.testng.ITestNGMethod) $stack22, 595)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,$stack23 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(),596,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack23 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(), 596)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack14 = l4[l6],988,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack14 = l4[l6], 988))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack22 = interfaceinvoke method.<java.util.Iterator: java.lang.Object next()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
					"line": 595
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 595
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 595
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 596
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 576
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 576
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
	"line": -1
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": -1
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack14 = l4[l6]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 988
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(),2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack12 = virtualinvoke l1.<java.lang.ref.SoftReference: java.lang.Object get()>(), 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack13 = (java.lang.Class$ReflectionData) $stack12,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack13 = (java.lang.Class$ReflectionData) $stack12, 2520)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l3 = $stack13,2520,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),845,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>,850,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>, 850)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),845,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l2 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>,850,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l2 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>, 850))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 845
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 850
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2520
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 845
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": 850
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = l1.<java.lang.Class$ReflectionData: java.lang.Class[] interfaces>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
					"line": 850
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2518,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2), 2511)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2),2511,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2), 2511)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l2 := @parameter1: int,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2),2511,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2), 2511))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 567
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2511
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2518
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2511
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
					"line": 2511
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[FAILED TEST]"),633,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[FAILED TEST]'), 633)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>,this := @this: org.rendersnake.HtmlCanvas,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>,$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>("</tr>"),5855,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)) SINK=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>,$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("[FAILED TEST]"),633,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>(thrown), 533) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[FAILED TEST]'), 633)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>,this := @this: org.rendersnake.HtmlCanvas,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>,$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>("</tr>"),5855,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 633
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
	"line": -1
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
	"line": 5855
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createThrownTable(java.lang.Throwable)>",
	"line": 633
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
	"line": -1
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
	"line": 5855
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>')",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
					"line": 5855
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6),2513,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l1 = l0.<java.lang.Class: java.lang.ref.SoftReference reflectionData>,2517,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,$stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6),2513,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, $stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6), 2513))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2517
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2513
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2513
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = staticinvoke <java.lang.Class$Atomic: boolean casReflectionData(java.lang.Class,java.lang.ref.SoftReference,java.lang.ref.SoftReference)>(l0, l1, $stack6)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
					"line": 2513
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.Class[] getInterfaces()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2518,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2), 2511)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503)) => Node(<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2518,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, $stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2), 2503) => (<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>, specialinvoke $stack5.<java.lang.Class$ReflectionData: void <init>(int)>(l2), 2511))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2518
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class[] getInterfaces()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
	"line": 2518
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = l0.<java.lang.Class: int classRedefinedCount>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>",
					"line": 2518
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>,$stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15),626,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15), 626)) SINK=>BASE: Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>,$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(),89,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>,$stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15),626,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15), 626))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
	"line": 626
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
				"location": {
					"file": "",
					"class": "org.rendersnake.HtmlCanvas",
					"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
					"line": 89
				},
				"stackTrace": [{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
	"line": 89
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
	"line": 626
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15)",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
					"line": 626
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2695,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>,2702,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l2 = $stack12,2697,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l0 := @parameter0: java.lang.reflect.Method[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,$stack4 = lengthof l0,3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975) => (<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l1 = newarray (java.lang.reflect.Method)[$stack4],3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(),569,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,methodName := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2695
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2702
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2697
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 569
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = (java.lang.String) l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 981
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,l2 = l0.<java.lang.Class: int classRedefinedCount>,2493,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695) => (<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>, l2 = l0.<java.lang.Class: int classRedefinedCount>, 2493)) => Node(<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>,$stack5 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData newReflectionData(java.lang.ref.SoftReference,int)>(l1, l2),2503,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack12 = virtualinvoke l0.<java.lang.Class: java.lang.Class[] getInterfaces()>(), 2378) => (<java.lang.Class: java.lang.Class[] getInterfaces()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 845)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(),2695,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>,2702,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975) => (<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)) => Node(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>,l2 = $stack12,2697,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l0 := @parameter0: java.lang.reflect.Method[],-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,$stack4 = lengthof l0,3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975) => (<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)) => Node(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>,l1 = newarray (java.lang.reflect.Method)[$stack4],3121,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)) => Node(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>,$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3),1975,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345)) => Node(<java.lang.Class: java.lang.ClassLoader getClassLoader0()>,$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>,689,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, l6 = virtualinvoke l0.<java.lang.Class: java.lang.ClassLoader getClassLoader0()>(), 2345))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2493
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>",
	"line": 2503
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2695
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2702
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
	"line": 2697
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
	"line": 3121
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
	"line": 1975
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
	"line": 689
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack1 = l0.<java.lang.Class: java.lang.ClassLoader classLoader>",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.ClassLoader getClassLoader0()>",
					"line": 689
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(),558,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>("Test Case is covered Indirectly by the following:"),558,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>,this := @this: org.rendersnake.HtmlCanvas,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,this := @this: org.rendersnake.HtmlCanvas,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack8 = $stack7 - 1,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8),251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)) => Node(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>,popped = (java.lang.String) $stack9,251,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>,$stack19 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(),604,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack19 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>(), 604)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l4 = l0.<java.lang.String: char[] value>,984,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531) => (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855) => (<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252) => (<java.lang.String: boolean equals(java.lang.Object)>, l4 = l0.<java.lang.String: char[] value>, 984))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack19 = interfaceinvoke method.<org.testng.ITestNGMethod: java.lang.String getMethodName()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
					"line": 604
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
	"line": 604
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 558
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 558
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 558
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
	"line": -1
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": -1
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "org.rendersnake.HtmlCanvas",
	"method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
	"line": 251
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 984
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l4 = l0.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 984
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(),560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,className#29 = exception#26[l6],582,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 582
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>()",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
					"line": 1279
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(),561,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = virtualinvoke l0.<java.lang.Class: java.lang.Class getDeclaringClass()>(),1277,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377)) SINK=>BASE: Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,l9 = p#30,562,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,methodName = l9[l11],560,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)) => Node(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>,$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(),567,SourceNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)) => Node(<java.lang.Class: java.lang.String getSimpleBinaryName()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(),1272,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.Class$EnclosingMethodInfo getEnclosingMethodInfo()>(), 1272)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(),1279,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443) => (<java.lang.Class: java.lang.Class getEnclosingClass()>, l3 = virtualinvoke l1.<java.lang.Class$EnclosingMethodInfo: java.lang.Class getEnclosingClass()>(), 1279)) => Node(<java.lang.Class: java.lang.Class getEnclosingClass()>,l2 = l3,1284,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567) => (<java.lang.Class: java.lang.String getSimpleName()>, l1 = specialinvoke l0.<java.lang.Class: java.lang.String getSimpleBinaryName()>(), 1309) => (<java.lang.Class: java.lang.String getSimpleBinaryName()>, l1 = virtualinvoke l0.<java.lang.Class: java.lang.Class getEnclosingClass()>(), 1443)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,l0 := @this: java.lang.Class,-1,SimpleNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351)) => Node(<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>,$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0),2377,SinkNode, path: (<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561) => (<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, specialinvoke l0.<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>(1, $stack2, 1), 1974) => (<java.lang.Class: void checkMemberAccess(int,java.lang.Class,boolean)>, specialinvoke l0.<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>(l5, l3), 2351) => (<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>, $stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0), 2377))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1272
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1279
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1284
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2377
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
					"line": 561
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 561
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 562
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 560
},{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
	"line": 567
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.String getSimpleBinaryName()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: java.lang.Class getEnclosingClass()>",
	"line": 1277
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": -1
},{
	"class": "java.lang.Class",
	"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
	"line": 2377
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack18 = staticinvoke <sun.reflect.misc.ReflectUtil: boolean isNonPublicProxyClass(java.lang.Class)>(l0)",
				"location": {
					"file": "",
					"class": "java.lang.Class",
					"method": "<java.lang.Class: void checkPackageAccess(java.lang.ClassLoader,boolean)>",
					"line": 2377
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l15 - l15",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l15 = lengthof l14",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 565
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 565
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l15 = lengthof l14",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 565
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 565
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l16 - l16",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l16 = 0",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 565
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 565
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l16 = 0",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 565
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 565
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l16 - l16",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l16 = l16 + 1",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 565
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 565
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l16 = l16 + 1",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 565
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 565
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l9 - l9",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l9 = p#30",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l10 - l10",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l10 = lengthof l9",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l10 = lengthof l9",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l11 - l11",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l11 = 0",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l11 = 0",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "groupCover - groupCover",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "groupCover = l14[l16]",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "groupCover = l14[l16]",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l11 - l11",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l11 = l11 + 1",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l11 = l11 + 1",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 562
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 562
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l5#27 - l5#27",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l5#27 = lengthof exception#26",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l5#27 = lengthof exception#26",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l6 - l6",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l6 = 0",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l6 = 0",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "methodName - methodName",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "methodName = l9[l11]",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "methodName = l9[l11]",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "l6 - l6",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "l6 = l6 + 1",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "l6 = l6 + 1",
				"location": {
					"file": "",
					"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
					"method": "getAdditionalInfo",
					"line": 560
				},
				"stackTrace": [{
	"class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
	"method": "getAdditionalInfo",
	"line": 560
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98), 569)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "rex = $stack3",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return rex",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "51"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 236)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>(), 236)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack4 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98), 569)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "596"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 596)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "239"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "groupCover = l14[l16]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, groupCover = l14[l16], 562)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "566"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover), 566)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>'), 4820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4771"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "626"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15), 626)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4770)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>'), 4770)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "255"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "626"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15), 626)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "255"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "604"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 604)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4769)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>'), 4769)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "604"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 604)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4224)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>'), 4224)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "88"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "164"
},
"stackTrace": [""]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack0 != null goto $stack1 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "164"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "rex = $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return rex",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "60"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "168"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4770)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>'), 4770)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>'), 4820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "596"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 596)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>'), 4279)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98), 569)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 1359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>'), 1359)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;'), 564)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack72 = (org.testng.annotations.Test) $stack71",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack72 = (org.testng.annotations.Test) $stack71, 564)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "566"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover), 566)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.lang.IllegalStateException",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "165"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)","(<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>, specialinvoke $stack2.<java.lang.IllegalStateException: void <init>(java.lang.String)>('HTML Escape Handler not set.Either the Apache commons lang3 library is missing oryou need to provide an implementation of HtmlEscapeHandler yourself.'), 165)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.lang.IllegalStateException: void <init>(java.lang.String)>('HTML Escape Handler not set.Either the Apache commons lang3 library is missing oryou need to provide an implementation of HtmlEscapeHandler yourself.')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "165"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)","(<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>, specialinvoke $stack2.<java.lang.IllegalStateException: void <init>(java.lang.String)>('HTML Escape Handler not set.Either the Apache commons lang3 library is missing oryou need to provide an implementation of HtmlEscapeHandler yourself.'), 165)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "596"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack24 = virtualinvoke $stack23.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 596)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "604"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack20 = virtualinvoke $stack19.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 604)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7), 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = (java.lang.String) $stack8",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack9 = (java.lang.String) $stack8, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7), 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = (java.lang.String) $stack8",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack9 = (java.lang.String) $stack8, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 236)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>(), 236)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack4 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "626"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15), 626)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 249)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l14 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.String[] coveredByGroups()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "565"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l14 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.String[] coveredByGroups()>(), 565)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "groupCover = l14[l16]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, groupCover = l14[l16], 562)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "566"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover), 566)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 249)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "559"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4224)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>'), 4224)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 1358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>'), 1358)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "626"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack16 = virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>($stack15), 626)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "255"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "566"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover), 566)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "588"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack28 = virtualinvoke $stack27.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 588)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "18"
},
"stackTrace": ["(<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "18"
},
"stackTrace": ["(<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack71 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class 'Lorg/testng/annotations/Test;'), 564)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack72 = (org.testng.annotations.Test) $stack71",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack72 = (org.testng.annotations.Test) $stack71, 564)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack73 = interfaceinvoke $stack72.<org.testng.annotations.Test: java.lang.String[] groups()>(), 564)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "564"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, group = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($stack73), 564)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "566"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack76 = virtualinvoke group.<java.lang.String: boolean contains(java.lang.CharSequence)>(groupCover), 566)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>'), 4279)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4225)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>'), 4225)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 1359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>'), 1359)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "588"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack28 = virtualinvoke $stack27.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 588)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "559"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4226"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>()",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2695"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, l3 = specialinvoke l0.<java.lang.Class: java.lang.Class$ReflectionData reflectionData()>(), 2695)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2702"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)","(<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>, $stack12 = l3.<java.lang.Class$ReflectionData: java.lang.reflect.Method[] declaredMethods>, 2702)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l2 = $stack12",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>",
  "line": "2697"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack90 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "559"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4225)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>'), 4225)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "168"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "168"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 249)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "methodName := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack28 = virtualinvoke $stack27.<java.lang.String: boolean equals(java.lang.Object)>(methodName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>",
  "line": "588"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>, $stack28 = virtualinvoke $stack27.<java.lang.String: boolean equals(java.lang.Object)>(methodName), 588)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4769)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>'), 4769)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 1358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>'), 1358)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}]
}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>",
  "line": "1409"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack128 = virtualinvoke $stack127.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "180"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack95 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack95 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "180"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "180"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "180"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "rex = $stack3",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return rex",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "51"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "570"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack103.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>(), 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "255"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 236)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>(), 236)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack4 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "625"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "570"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack103.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>(), 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack88 = new java.lang.StringBuilder",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke $stack88.<java.lang.StringBuilder: void <init>()>(), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('::')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('::'), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "239"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>'), 4820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>",
  "line": "1409"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack128 = virtualinvoke $stack127.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</p>'), 4820)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "4820"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4771"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "625"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "255"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4770)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>'), 4770)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "255"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack83 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack83 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack84 = virtualinvoke $stack83.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas li()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack84 = virtualinvoke $stack83.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas li()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "625"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 249)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4769)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>'), 4769)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4224)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>'), 4224)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "180"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "88"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack0 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "164"
},
"stackTrace": [""]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack0 != null goto $stack1 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "164"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' - [Test ')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack96 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' - [Test '), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack100 = virtualinvoke $stack99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(']')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack100 = virtualinvoke $stack99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(']'), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack101 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack101 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.String toString()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, exception#26 = interfaceinvoke thrown#25.<org.w3.ldp.testsuite.annotations.SpecTest: java.lang.Class[] coveredByTests()>(), 560)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "className#29 = exception#26[l6]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "582"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, className#29 = exception#26[l6], 582)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @this: java.lang.Class",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack3 = specialinvoke l0.<java.lang.Class: java.lang.reflect.Method[] privateGetDeclaredMethods(boolean)>(0), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l0 := @parameter0: java.lang.reflect.Method[]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = lengthof l0",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)","(<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>, $stack4 = lengthof l0, 3121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "l1 = newarray (java.lang.reflect.Method)[$stack4]",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>",
  "line": "3121"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)","(<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>, $stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3), 1975)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack4 = staticinvoke <java.lang.Class: java.lang.reflect.Method[] copyMethods(java.lang.reflect.Method[])>($stack3)",
"location": {
  "file": "",
  "class": "java.lang.Class",
  "method": "<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>",
  "line": "1975"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "rex = $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return rex",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "60"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "168"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4770)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4770"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</p>'), 4770)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>'), 4279)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 1359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>'), 1359)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "561"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, p#30 = virtualinvoke className#29.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>(), 561)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = new java.lang.IllegalStateException",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "165"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)","(<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>, specialinvoke $stack2.<java.lang.IllegalStateException: void <init>(java.lang.String)>('HTML Escape Handler not set.Either the Apache commons lang3 library is missing oryou need to provide an implementation of HtmlEscapeHandler yourself.'), 165)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack2.<java.lang.IllegalStateException: void <init>(java.lang.String)>('HTML Escape Handler not set.Either the Apache commons lang3 library is missing oryou need to provide an implementation of HtmlEscapeHandler yourself.')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "165"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)","(<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>, specialinvoke $stack2.<java.lang.IllegalStateException: void <init>(java.lang.String)>('HTML Escape Handler not set.Either the Apache commons lang3 library is missing oryou need to provide an implementation of HtmlEscapeHandler yourself.'), 165)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "180"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7), 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = (java.lang.String) $stack8",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack9 = (java.lang.String) $stack8, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack8 = virtualinvoke $stack5.<java.util.ArrayList: java.lang.Object remove(int)>($stack7), 238)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = (java.lang.String) $stack8",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack9 = (java.lang.String) $stack8, 238)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "238"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, virtualinvoke $stack4.<java.io.Writer: void write(java.lang.String)>($stack9), 238)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 236)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack2 = virtualinvoke $stack1.<java.util.ArrayList: boolean isEmpty()>(), 236)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack2 == 0 goto $stack4 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "236"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack83 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack83 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack84 = virtualinvoke $stack83.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas li()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack84 = virtualinvoke $stack83.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas li()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 1359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>'), 1359)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack5 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack7 = virtualinvoke $stack5.<java.util.ArrayList: int size()>(), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack8 = $stack7 - 1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack8 = $stack7 - 1, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 249)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "559"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4224)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4224"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<ul>'), 4224)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1360"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 1358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>'), 1358)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack83 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack83 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack84 = virtualinvoke $stack83.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas li()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack84 = virtualinvoke $stack83.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas li()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 1358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>'), 1358)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "255"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack97 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.String getName()>(), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack98 = specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: java.lang.String findTestResult(java.lang.String)>($stack97), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack96 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' - [Test ')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack96 = virtualinvoke $stack94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' - [Test '), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack99 = virtualinvoke $stack96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack98), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack100 = virtualinvoke $stack99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(']')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack100 = virtualinvoke $stack99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(']'), 569)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack101 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "569"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack101 = virtualinvoke $stack100.<java.lang.StringBuilder: java.lang.String toString()>(), 569)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "179"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, interfaceinvoke $stack2.<org.rendersnake.internal.HtmlEscapeHandler: void escapeHtml(java.io.Writer,java.lang.String)>($stack3, unescapedString), 179)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>",
  "line": "48"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack12 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>(popped, expectedTag), 253)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException unexpectedTag(java.lang.String,java.lang.String)>, specialinvoke $stack3.<org.rendersnake.error.RenderException: void <init>()>(), 48)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "18"
},
"stackTrace": ["(<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<java.lang.RuntimeException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: void <init>()>",
  "line": "18"
},
"stackTrace": ["(<org.rendersnake.error.RenderException: void <init>()>, specialinvoke this.<java.lang.RuntimeException: void <init>()>(), 18)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack58 = virtualinvoke $stack57.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('Test Case is covered Indirectly by the following:'), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack129.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _p()>(), 545)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</ul>'), 4279)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "4279"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack88 = new java.lang.StringBuilder",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke $stack88.<java.lang.StringBuilder: void <init>()>(), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('::')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack89 = virtualinvoke $stack88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('::'), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack91 = virtualinvoke $stack89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack90), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack92 = virtualinvoke $stack91.<java.lang.StringBuilder: java.lang.String toString()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "unescapedString := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if unescapedString != null goto $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "178"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "570"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack103.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>(), 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 249)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "570"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack103 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, virtualinvoke $stack103.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _li()>(), 570)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 254)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "254"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, virtualinvoke $stack11.<java.io.Writer: void write(java.lang.String)>(popped), 254)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4225)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>'), 4225)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 1359)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1359"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</b>'), 1359)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]')",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>",
  "line": "625"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack9 = virtualinvoke $stack6.<java.util.ArrayList: java.lang.Object remove(int)>($stack8), 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "popped = (java.lang.String) $stack9",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "251"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, popped = (java.lang.String) $stack9, 251)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag)",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack10 = virtualinvoke popped.<java.lang.String: boolean equals(java.lang.Object)>(expectedTag), 252)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack10 != 0 goto $stack11 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "252"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "559"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4226"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "l9 = p#30",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "562"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, l9 = p#30, 562)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "methodName = l9[l11]",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "560"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, methodName = l9[l11], 560)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack81 = virtualinvoke methodName.<java.lang.reflect.Method: java.lang.Class getDeclaringClass()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "567"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, testCaseName = virtualinvoke $stack81.<java.lang.Class: java.lang.String getSimpleName()>(), 567)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName)",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack86 = virtualinvoke $stack85.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(testCaseName), 568)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "568"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack87 = virtualinvoke $stack86.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _b()>(), 568)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return this",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>",
  "line": "180"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "559"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack60 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 559)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, $stack2 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 4225)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>",
  "line": "4225"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack14.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>(), 616)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas ul()>, virtualinvoke $stack2.<java.util.ArrayList: boolean add(java.lang.Object)>('</ul>'), 4225)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler HTML_ESCAPE_HANDLER>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "168"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>(aString), 88)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas write(java.lang.String)>, $stack2 = staticinvoke <org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>(), 179)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack1",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.internal.HtmlEscapeHandler getHtmlEscapeHandler()>",
  "line": "168"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack56 = virtualinvoke $stack55.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 558)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>()",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack57 = virtualinvoke $stack56.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "return $stack3",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>",
  "line": "89"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "576"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack63 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 576)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, virtualinvoke $stack16.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _ul()>(), 619)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack3 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>, 249)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, virtualinvoke $stack10.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>(), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas _tr()>, $stack1 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>('</tr>'), 5855)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>, $stack4 = virtualinvoke $stack3.<java.util.ArrayList: boolean isEmpty()>(), 249)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "if $stack4 == 0 goto $stack6 = this.<org.rendersnake.HtmlCanvas: java.util.ArrayList openTagStack>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close(java.lang.String)>",
  "line": "249"
},
"stackTrace": [""]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = new org.rendersnake.error.RenderException",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>()",
"location": {
  "file": "",
  "class": "org.rendersnake.error.RenderException",
  "method": "<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>",
  "line": "58"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>(thrown), 531)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void createSkipExceptionTable(java.lang.Throwable)>, $stack10 = virtualinvoke $stack9.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>('[SKIPPED TEST]'), 625)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas content(java.lang.String)>, $stack3 = virtualinvoke this.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>(), 89)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas close()>, $stack10 = staticinvoke <org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>(), 237)","(<org.rendersnake.error.RenderException: org.rendersnake.error.RenderException emptyStack()>, specialinvoke $stack1.<org.rendersnake.error.RenderException: void <init>()>(), 58)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>",
"location": {
  "file": "",
  "class": "org.w3.ldp.testsuite.reporter.LdpHtmlReporter",
  "method": "<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>",
  "line": "558"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack55 = this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: org.rendersnake.HtmlCanvas html>, 558)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: org.rendersnake.HtmlCanvas",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "-1"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)"]
}, {
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 4769)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>",
  "line": "4769"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, specialinvoke this.<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>($stack105, $stack106), 556)","(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void writeSteps(java.lang.String[],java.lang.String)>, $stack8 = virtualinvoke $stack7.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>(), 615)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas p()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<p>'), 4769)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "$stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, $stack1 = this.<org.rendersnake.HtmlCanvas: java.io.Writer out>, 1358)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>')",
"location": {
  "file": "",
  "class": "org.rendersnake.HtmlCanvas",
  "method": "<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>",
  "line": "1358"
},
"stackTrace": ["(<org.w3.ldp.testsuite.reporter.LdpHtmlReporter: void getAdditionalInfo(org.testng.ITestResult,org.testng.ITestNGMethod)>, $stack126 = virtualinvoke $stack125.<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>(), 544)","(<org.rendersnake.HtmlCanvas: org.rendersnake.HtmlCanvas b()>, virtualinvoke $stack1.<java.io.Writer: void write(java.lang.String)>('<b>'), 1358)"]
}]
}
}

]
