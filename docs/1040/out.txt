List(Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack81 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(),176,SourceNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack81 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(), 176)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack82 = interfaceinvoke $stack81.<org.jgrapht.GraphType: boolean isAllowingMultipleEdges()>(),176,SourceNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack82 = interfaceinvoke $stack81.<org.jgrapht.GraphType: boolean isAllowingMultipleEdges()>(), 176)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack82 != 0 goto $stack15 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: int m>,176,SourceNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19),171,SimpleNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19), 171)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack15 <= $stack21 goto $stack22 = new java.util.HashMap,171,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if i >= $stack26 goto $stack27 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),183,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(),184,SinkNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(), 184)))

List(Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack17 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(),172,SourceNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack17 = interfaceinvoke target.<org.jgrapht.Graph: org.jgrapht.GraphType getType()>(), 172)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack18 = interfaceinvoke $stack17.<org.jgrapht.GraphType: boolean isDirected()>(),172,SourceNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack18 = interfaceinvoke $stack17.<org.jgrapht.GraphType: boolean isDirected()>(), 172)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19),171,SimpleNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19), 171)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack15 <= $stack21 goto $stack22 = new java.util.HashMap,171,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if i >= $stack26 goto $stack27 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),183,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(),184,SinkNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(), 184)))

List(Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack14 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: boolean multipleEdges>,165,SourceNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack14 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: boolean multipleEdges>, 165)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack14 == 0 goto $stack15 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: int m>,165,SourceNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19),171,SimpleNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19), 171)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack15 <= $stack21 goto $stack22 = new java.util.HashMap,171,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if i >= $stack26 goto $stack27 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),183,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(),184,SinkNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(), 184)))

List(Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack13 == 0 goto $stack14 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: boolean multipleEdges>,160,SourceNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack14 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: boolean multipleEdges>,165,SourceNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack14 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: boolean multipleEdges>, 165)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack14 == 0 goto $stack15 = this.<org.jgrapht.generate.GnmRandomGraphGenerator: int m>,165,SourceNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,$stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19),171,SimpleNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, $stack21 = staticinvoke <org.jgrapht.generate.GnmRandomGraphGenerator: int computeMaximumAllowedEdges(int,boolean,boolean,boolean)>($stack16, $stack18, $stack20, $stack19), 171)) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if $stack15 <= $stack21 goto $stack22 = new java.util.HashMap,171,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,if i >= $stack26 goto $stack27 = interfaceinvoke target.<org.jgrapht.Graph: java.util.Set vertexSet()>(),183,SimpleNode, path: ) => Node(<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>,currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(),184,SinkNode, path: (<org.jgrapht.generate.GnmRandomGraphGenerator: void generateGraph(org.jgrapht.Graph,java.util.Map)>, currVertex = interfaceinvoke target.<org.jgrapht.Graph: java.lang.Object addVertex()>(), 184)))

