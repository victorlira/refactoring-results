Running soot scenario mongowp;com.eightkdata.mongowp.utils.BsonReaderTool;getHostAndPort(Entry<?>, String);0d07d54c9494205afde3a7a17a9b449bb2308e6d
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/mongowp/0d07d54c9494205afde3a7a17a9b449bb2308e6d/original-without-dependencies/mongowp-core-0.50.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,46800
Time to perform Confluence 1 Inter 0,55400
Configure Soot Confluence 2 Inter 0,32900
Time to perform Confluence 2 Inter 0,25500
Visited methods: 14
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/mongowp/0d07d54c9494205afde3a7a17a9b449bb2308e6d/original-without-dependencies/mongowp-core-0.50.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,60100
Runtime: 0.01s
Time to perform OA Inter 0,73600
OA Inter Visited methods: 7
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/mongowp/0d07d54c9494205afde3a7a17a9b449bb2308e6d/original-without-dependencies/mongowp-core-0.50.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,48000
Time to perform DFP Inter 0,54400
Depth limit: 5
CONFLICTS: DF interference in <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack2 = virtualinvoke $stack1.<com.google.common.net.HostAndPort: com.google.common.net.HostAndPort withDefaultPort(int)>(27017),631,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,return $stack2,630,SinkNode, path: )), List(Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString),630,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626) => (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>, $stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString), 630)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack2 = virtualinvoke $stack1.<com.google.common.net.HostAndPort: com.google.common.net.HostAndPort withDefaultPort(int)>(27017),631,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,return $stack2,630,SinkNode, path: ))]
Visited methods: 7
 Analysis results
----------------------------
 Number of conflicts: 2
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/mongowp/0d07d54c9494205afde3a7a17a9b449bb2308e6d/original-without-dependencies/mongowp-core-0.50.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,58400
Time to perform DFP Inter 0,60400
Depth limit: 5
CONFLICTS: DF interference in <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>
Empty list for reporting data flow! Error: head of empty list
DF interference in <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,$stack5 = interfaceinvoke $stack4.<com.eightkdata.mongowp.bson.BsonString: java.lang.Object getValue()>(),592,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625) => (<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack5 = interfaceinvoke $stack4.<com.eightkdata.mongowp.bson.BsonString: java.lang.Object getValue()>(), 592)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,$stack6 = (java.lang.String) $stack5,592,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry),625,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,hostPortString := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString),630,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626) => (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>, $stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString), 630)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack2 = virtualinvoke $stack1.<com.google.common.net.HostAndPort: com.google.common.net.HostAndPort withDefaultPort(int)>(27017),631,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,return $stack2,630,SinkNode, path: )), List(Node(<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,object = interfaceinvoke entry.<com.eightkdata.mongowp.bson.BsonDocument$Entry: com.eightkdata.mongowp.bson.BsonValue getValue()>(),588,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625) => (<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, object = interfaceinvoke entry.<com.eightkdata.mongowp.bson.BsonDocument$Entry: com.eightkdata.mongowp.bson.BsonValue getValue()>(), 588)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,$stack4 = interfaceinvoke object.<com.eightkdata.mongowp.bson.BsonValue: com.eightkdata.mongowp.bson.BsonString asString()>(),592,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625) => (<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack4 = interfaceinvoke object.<com.eightkdata.mongowp.bson.BsonValue: com.eightkdata.mongowp.bson.BsonString asString()>(), 592)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,$stack5 = interfaceinvoke $stack4.<com.eightkdata.mongowp.bson.BsonString: java.lang.Object getValue()>(),592,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625) => (<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack5 = interfaceinvoke $stack4.<com.eightkdata.mongowp.bson.BsonString: java.lang.Object getValue()>(), 592)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,$stack6 = (java.lang.String) $stack5,592,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry),625,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,hostPortString := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString),630,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626) => (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>, $stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString), 630)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack2 = virtualinvoke $stack1.<com.google.common.net.HostAndPort: com.google.common.net.HostAndPort withDefaultPort(int)>(27017),631,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,return $stack2,630,SinkNode, path: )), List(Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>,string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry),625,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, string = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: java.lang.String getString(com.eightkdata.mongowp.bson.BsonDocument$Entry)>(entry), 625)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,hostPortString := @parameter0: java.lang.String,-1,SimpleNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString),630,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626) => (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>, $stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString), 630)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack2 = virtualinvoke $stack1.<com.google.common.net.HostAndPort: com.google.common.net.HostAndPort withDefaultPort(int)>(27017),631,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,return $stack2,630,SinkNode, path: )), List(Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack2 = virtualinvoke $stack1.<com.google.common.net.HostAndPort: com.google.common.net.HostAndPort withDefaultPort(int)>(27017),631,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,return $stack2,630,SinkNode, path: )), List(Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString),630,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626) => (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>, $stack1 = staticinvoke <com.google.common.net.HostAndPort: com.google.common.net.HostAndPort fromString(java.lang.String)>(hostPortString), 630)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,$stack2 = virtualinvoke $stack1.<com.google.common.net.HostAndPort: com.google.common.net.HostAndPort withDefaultPort(int)>(27017),631,SourceNode, path: (<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(com.eightkdata.mongowp.bson.BsonDocument$Entry)>, $stack3 = staticinvoke <com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>(string), 626)) => Node(<com.eightkdata.mongowp.utils.BsonReaderTool: com.google.common.net.HostAndPort getHostAndPort(java.lang.String)>,return $stack2,630,SinkNode, path: ))]
Visited methods: 8
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/mongowp/0d07d54c9494205afde3a7a17a9b449bb2308e6d/original-without-dependencies/mongowp-core-0.50.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,60700
Time to perform PDG 0,55900
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/mongowp/0d07d54c9494205afde3a7a17a9b449bb2308e6d/original-without-dependencies/mongowp-core-0.50.0.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,46600
Time to perform PDG 0,62300
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
