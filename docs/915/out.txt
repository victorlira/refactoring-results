List(Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack276 == 0 goto $stack278 = i#18[lineAsArrayIndex],888,SourceNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,address = "0",889,SourceNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack39 = virtualinvoke $stack38.<fi.helsinki.cs.titokone.SymbolicInterpreter: int getRegisterId(java.lang.String)>(address), 948)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,address = virtualinvoke $stack219.<java.lang.String: java.lang.String substring(int)>($stack220),908,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, address = virtualinvoke $stack219.<java.lang.String: java.lang.String substring(int)>($stack220), 908)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack136 = virtualinvoke address.<java.lang.String: char charAt(int)>(i),1020,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack136 = virtualinvoke address.<java.lang.String: char charAt(int)>(i), 1020)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack136 == 45 goto i = i + 1,1020,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack133 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack132),1022,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack133 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack132), 1022)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack133 != 0 goto i = i + 1,1022,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,isANumber = 0,1023,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if isANumber == 0 goto $stack43 = virtualinvoke addressingMode.<java.lang.String: boolean equals(java.lang.Object)>("="),1030,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack119 = virtualinvoke address.<java.lang.String: int length()>(),1031,SinkNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack119 = virtualinvoke address.<java.lang.String: int length()>(), 1031)))

List(Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,address = "0",889,SourceNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack39 = virtualinvoke $stack38.<fi.helsinki.cs.titokone.SymbolicInterpreter: int getRegisterId(java.lang.String)>(address), 948)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,address = virtualinvoke $stack219.<java.lang.String: java.lang.String substring(int)>($stack220),908,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, address = virtualinvoke $stack219.<java.lang.String: java.lang.String substring(int)>($stack220), 908)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack136 = virtualinvoke address.<java.lang.String: char charAt(int)>(i),1020,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack136 = virtualinvoke address.<java.lang.String: char charAt(int)>(i), 1020)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack136 == 45 goto i = i + 1,1020,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack133 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack132),1022,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack133 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack132), 1022)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack133 != 0 goto i = i + 1,1022,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,isANumber = 0,1023,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if isANumber == 0 goto $stack43 = virtualinvoke addressingMode.<java.lang.String: boolean equals(java.lang.Object)>("="),1030,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack119 = virtualinvoke address.<java.lang.String: int length()>(),1031,SinkNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack119 = virtualinvoke address.<java.lang.String: int length()>(), 1031)))

List(Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack248 = this.<fi.helsinki.cs.titokone.Compiler: fi.helsinki.cs.titokone.SymbolicInterpreter symbolicInterpreter>,936,SourceNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack248 = this.<fi.helsinki.cs.titokone.Compiler: fi.helsinki.cs.titokone.SymbolicInterpreter symbolicInterpreter>, 936)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack249 = virtualinvoke $stack248.<fi.helsinki.cs.titokone.SymbolicInterpreter: int getRegisterId(java.lang.String)>(secondRegister),936,SourceNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack249 = virtualinvoke $stack248.<fi.helsinki.cs.titokone.SymbolicInterpreter: int getRegisterId(java.lang.String)>(secondRegister), 936)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack249 != -1 goto lineAsArrayIndex = lineAsArrayIndex + 1,936,SourceNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack39 == -1 goto $stack40 = lengthof i#18,948,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,secondRegister = address,949,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, secondRegister = address, 949)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack193 = virtualinvoke secondRegister.<java.lang.String: boolean equals(java.lang.Object)>(""),1018,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack193 = virtualinvoke secondRegister.<java.lang.String: boolean equals(java.lang.Object)>(''), 1018)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack193 == 0 goto $stack42 = virtualinvoke address.<java.lang.String: boolean equals(java.lang.Object)>(""),1018,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack42 = virtualinvoke address.<java.lang.String: boolean equals(java.lang.Object)>(""),1018,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack42 = virtualinvoke address.<java.lang.String: boolean equals(java.lang.Object)>(''), 1018)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack42 != 0 goto $stack43 = virtualinvoke addressingMode.<java.lang.String: boolean equals(java.lang.Object)>("="),1018,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,i = 0,1020,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack136 = virtualinvoke address.<java.lang.String: char charAt(int)>(i), 1020)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if i != 0 goto $stack132 = virtualinvoke address.<java.lang.String: char charAt(int)>(i),1021,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack133 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack132),1022,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack133 = staticinvoke <java.lang.Character: boolean isDigit(char)>($stack132), 1022)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if $stack133 != 0 goto i = i + 1,1022,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,isANumber = 0,1023,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,if isANumber == 0 goto $stack43 = virtualinvoke addressingMode.<java.lang.String: boolean equals(java.lang.Object)>("="),1030,SimpleNode, path: ) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack119 = virtualinvoke address.<java.lang.String: int length()>(),1031,SinkNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack119 = virtualinvoke address.<java.lang.String: int length()>(), 1031)))

List(Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,addressingMode = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack319),852,SourceNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, addressingMode = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack319), 852)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack272 = virtualinvoke addressingMode.<java.lang.String: int length()>(),881,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack272 = virtualinvoke addressingMode.<java.lang.String: int length()>(), 881)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,address = virtualinvoke $stack271.<java.lang.String: java.lang.String substring(int,int)>($stack272, $stack274),880,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, address = virtualinvoke $stack271.<java.lang.String: java.lang.String substring(int,int)>($stack272, $stack274), 880)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack276 = virtualinvoke address.<java.lang.String: boolean isEmpty()>(),888,SinkNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack276 = virtualinvoke address.<java.lang.String: boolean isEmpty()>(), 888)))

List(Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,addressingMode = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack319),852,SourceNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, addressingMode = staticinvoke <java.lang.String: java.lang.String valueOf(char)>($stack319), 852)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,$stack272 = virtualinvoke addressingMode.<java.lang.String: int length()>(),881,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack272 = virtualinvoke addressingMode.<java.lang.String: int length()>(), 881)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,address = virtualinvoke $stack271.<java.lang.String: java.lang.String substring(int,int)>($stack272, $stack274),880,SimpleNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, address = virtualinvoke $stack271.<java.lang.String: java.lang.String substring(int,int)>($stack272, $stack274), 880)) => Node(<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>,address = "0",889,SinkNode, path: (<fi.helsinki.cs.titokone.Compiler: java.lang.String[] parseLine(java.lang.String)>, $stack39 = virtualinvoke $stack38.<fi.helsinki.cs.titokone.SymbolicInterpreter: int getRegisterId(java.lang.String)>(address), 948)))

