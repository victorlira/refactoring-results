Running soot scenario datasift-java;org.datasift.streamconsumer.HttpMultiThread;run();27ae5e0af9801b9e37cd960e12136404eae3676e
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/27ae5e0af9801b9e37cd960e12136404eae3676e/original-without-dependencies/datasift-java-1.1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,57900
Time to perform Confluence 1 Inter 1,38800
Configure Soot Confluence 2 Inter 0,17000
Time to perform Confluence 2 Inter 0,94900
Visited methods: 94
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack71 = new java.io.InputStreamReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71),108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108))
SINK=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack71 = new java.io.InputStreamReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73),108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73), 108)), SOURCE=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20),116,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20), 116))
SINK=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20),116,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20), 116)), SOURCE=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20), 116)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>,specialinvoke $stack3.<org.datasift.JSONdn: void <init>(java.lang.String)>(line),45,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20), 116) => (<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>, specialinvoke $stack3.<org.datasift.JSONdn: void <init>(java.lang.String)>(line), 45))
SINK=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>,line := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20), 116)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>,specialinvoke $stack3.<org.datasift.JSONdn: void <init>(java.lang.String)>(line),45,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20), 116) => (<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>, specialinvoke $stack3.<org.datasift.JSONdn: void <init>(java.lang.String)>(line), 45)), SOURCE=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,client = $stack29,94,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, client = $stack29, 94)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,response = virtualinvoke client.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(get),100,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, response = virtualinvoke client.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(get), 100)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack61 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),134,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack61 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 134)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack62 = interfaceinvoke $stack61.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(),135,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack62 = interfaceinvoke $stack61.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(), 135)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),131,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack60 = virtualinvoke $stack59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 131)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack63 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),135,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack63 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 135)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),135,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 135)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack77 = virtualinvoke line#20.<java.lang.String: int length()>(), 115)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack77 = virtualinvoke line#20.<java.lang.String: int length()>(), 115) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623))
SINK=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112)) => Node(<java.lang.String: int length()>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack77 = virtualinvoke line#20.<java.lang.String: int length()>(), 115)) => Node(<java.lang.String: int length()>,$stack1 = l0.<java.lang.String: char[] value>,623,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack77 = virtualinvoke line#20.<java.lang.String: int length()>(), 115) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)), SOURCE=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack77 = virtualinvoke line#20.<java.lang.String: int length()>(),115,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack77 = virtualinvoke line#20.<java.lang.String: int length()>(), 115)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack77 <= 100 goto (branch),115,SinkNode, path: )
SINK=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack77 = virtualinvoke line#20.<java.lang.String: int length()>(),115,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack77 = virtualinvoke line#20.<java.lang.String: int length()>(), 115)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack77 <= 100 goto (branch),115,SinkNode, path: ), SOURCE=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112))
SINK=>BASE: Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(),112,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, line#20 = virtualinvoke reader#7.<java.io.BufferedReader: java.lang.String readLine()>(), 112))]
Confluence interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Confluence flows from execution of lines 108 and 108 to line 108, defined in specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73) and specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73) and used in specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73)
Caused by line 108 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73), 108)
Caused by line 108 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73), 108)
Caused by line 108 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack71.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($stack73), 108)
Confluence interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Confluence flows from execution of lines 108 and 108 to line 116, defined in specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71) and specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71) and used in virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20)
Caused by line 108 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)
Caused by line 108 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)
Caused by line 116 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: void processLine(java.lang.String)>(line#20), 116)
Confluence interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Confluence flows from execution of lines 94 and 108 to line 115, defined in client = $stack29 and specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71) and used in $stack77 = virtualinvoke line#20.<java.lang.String: int length()>()
Caused by line 94 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, client = $stack29, 94)
Caused by line 108 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)
Caused by line 115 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack77 = virtualinvoke line#20.<java.lang.String: int length()>(), 115) => (<java.lang.String: int length()>, $stack1 = l0.<java.lang.String: char[] value>, 623)
java.util.NoSuchElementException: head of empty list
	at scala.collection.immutable.Nil$.head(List.scala:430)
	at scala.collection.immutable.Nil$.head(List.scala:427)
	at scala.collection.generic.TraversableForwarder.head(TraversableForwarder.scala:59)
	at scala.collection.generic.TraversableForwarder.head$(TraversableForwarder.scala:59)
	at scala.collection.mutable.ListBuffer.head(ListBuffer.scala:47)
	at br.unb.cic.analysis.svfa.confluence.DFPConfluenceAnalysis.reportConflictsConfluence(DFPConfluenceAnalysis.java:181)
	at br.unb.cic.analysis.Main.runDFPConfluenceAnalysis(Main.java:566)
	at br.unb.cic.analysis.Main.runAnalysis(Main.java:243)
	at br.unb.cic.analysis.Main.main(Main.java:80)
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/27ae5e0af9801b9e37cd960e12136404eae3676e/original-without-dependencies/datasift-java-1.1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,60700
Runtime: 0.028s
OA interference in class HttpMultiThread, method void run(), execution of line 91 overrides 91, assigning to variable reader#7, 
Caused by line 91 flow:
at org.datasift.streamconsumer.HttpMultiThread.run(HttpMultiThread.java:91)
And line 91 flow:
at org.datasift.streamconsumer.HttpMultiThread.run(HttpMultiThread.java:91)
 
OA interference in class HttpMultiThread, method void run(), execution of line 143 overrides 143, assigning to variable l10, 
Caused by line 143 flow:
at org.datasift.streamconsumer.HttpMultiThread.run(HttpMultiThread.java:143)
And line 143 flow:
at org.datasift.streamconsumer.HttpMultiThread.run(HttpMultiThread.java:143)
 
Time to perform OA Inter 0,71200
OA Inter Visited methods: 8
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/27ae5e0af9801b9e37cd960e12136404eae3676e/original-without-dependencies/datasift-java-1.1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,62700
Time to perform DFP Inter 1,04700
Depth limit: 5
CONFLICTS: DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Data flows from execution of line 171 to 171, defined in reader#7 = null and propagated in virtualinvoke reader#7.<java.io.BufferedReader: void close()>()
Caused by line 171 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171)
Caused by line 171 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171)
DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Empty list for reporting data flow! Error: head of empty list
DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Data flows from execution of line 108 to 171, defined in $stack70 = new java.io.BufferedReader and propagated in virtualinvoke reader#7.<java.io.BufferedReader: void close()>()
Caused by line 108 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)
Caused by line 171 flow: path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171)
DF interference in <org.datasift.streamconsumer.HttpMultiThread: void run()>
Empty list for reporting data flow! Error: head of empty list
[List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = null,91,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),171,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = null,91,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack16 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),169,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),171,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack16 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),169,SinkNode, path: ))]
Visited methods: 47
 Analysis results
----------------------------
 Number of conflicts: 4
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/27ae5e0af9801b9e37cd960e12136404eae3676e/original-without-dependencies/datasift-java-1.1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,55300
Time to perform DFP Inter 1,05000
Depth limit: 5
CONFLICTS: []
Visited methods: 47
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/27ae5e0af9801b9e37cd960e12136404eae3676e/original-without-dependencies/datasift-java-1.1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,57900
Time to perform PDG 0,63900
CONFLICTS: [List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,client = $stack29,94,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, client = $stack29, 94)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,response = virtualinvoke client.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(get),100,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, response = virtualinvoke client.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(get), 100)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack55 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),101,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack55 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 101)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,statusCode = interfaceinvoke $stack55.<org.apache.http.StatusLine: int getStatusCode()>(),101,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, statusCode = interfaceinvoke $stack55.<org.apache.http.StatusLine: int getStatusCode()>(), 101)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if statusCode != 200 goto (branch),102,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack74 != 2 goto virtualinvoke get.<org.apache.http.client.methods.HttpGet: void abort()>(),110,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack16 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),178,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack16 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(), 178)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack16 != 2 goto $stack17 = virtualinvoke reason.<java.lang.String: int length()>(),178,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack21 != 0 goto $stack12 = this.<org.datasift.streamconsumer.HttpMultiThread: boolean _kill_requested>,189,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack12 == 0 goto $stack13 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),79,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack14 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),92,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack14 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(), 92)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack14 != 2 goto $stack15 = virtualinvoke reason.<java.lang.String: int length()>(),92,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack16 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),169,SinkNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),171,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),171,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,client = $stack29,94,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, client = $stack29, 94)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,response = virtualinvoke client.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(get),100,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, response = virtualinvoke client.<org.apache.http.impl.client.DefaultHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>(get), 100)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack61 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(),134,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack61 = interfaceinvoke response.<org.apache.http.HttpResponse: org.apache.http.StatusLine getStatusLine()>(), 134)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack62 = interfaceinvoke $stack61.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(),135,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack62 = interfaceinvoke $stack61.<org.apache.http.StatusLine: java.lang.String getReasonPhrase()>(), 135)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack63 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62),135,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack63 = virtualinvoke $stack60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack62), 135)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reason = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(),135,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reason = virtualinvoke $stack63.<java.lang.StringBuilder: java.lang.String toString()>(), 135)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack15 = virtualinvoke reason.<java.lang.String: int length()>(),154,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack15 = virtualinvoke reason.<java.lang.String: int length()>(), 154)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack15 != 0 goto (branch),154,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack26 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),155,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, $stack26 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(), 155)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack26 != 2 goto (branch),155,SimpleNode, path: ) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if $stack28 == 0 goto (branch),169,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = null,91,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,virtualinvoke reader#7.<java.io.BufferedReader: void close()>(),171,SinkNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171))), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,$stack70 = new java.io.BufferedReader,106,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, specialinvoke $stack70.<java.io.BufferedReader: void <init>(java.io.Reader)>($stack71), 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = $stack70,108,SimpleNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, reader#7 = $stack70, 108)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack16 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),169,SinkNode, path: )), List(Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,reader#7 = null,91,SourceNode, path: (<org.datasift.streamconsumer.HttpMultiThread: void run()>, virtualinvoke reader#7.<java.io.BufferedReader: void close()>(), 171)) => Node(<org.datasift.streamconsumer.HttpMultiThread: void run()>,if reader#7 == null goto $stack16 = virtualinvoke this.<org.datasift.streamconsumer.HttpMultiThread: int getConsumerState()>(),169,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 6
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/27ae5e0af9801b9e37cd960e12136404eae3676e/original-without-dependencies/datasift-java-1.1.1-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,58300
Time to perform PDG 0,57600
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
