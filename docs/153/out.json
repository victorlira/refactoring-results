[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,matchSet = $stack9,107,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack9",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
					"line": 107
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 107
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.BeforeFilters",
					"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 37
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,matchSet = $stack9,107,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack9",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
					"line": 107
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 107
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14)",
				"location": {
					"file": "",
					"class": "spark.http.matching.BeforeFilters",
					"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 35
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0),233,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0), 233)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,this := @this: spark.route.Routes,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0),233,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0), 233))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
	"line": 52
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 233
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 233
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
					"line": 233
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri),116,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String acceptType> = acceptType,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String acceptType> = acceptType, 66)) => Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 34)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
					"line": 109
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 116
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": 66
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.Routes",
					"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
					"line": 34
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routeEntry = (spark.route.RouteEntry) $stack8,203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, routeEntry = (spark.route.RouteEntry) $stack8, 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack9 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>,198,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack9 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>, 198)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack10 = interfaceinvoke acceptedTypes.<java.util.Map: boolean containsKey(java.lang.Object)>($stack9),198,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack10 = interfaceinvoke acceptedTypes.<java.util.Map: boolean containsKey(java.lang.Object)>($stack9), 198)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,this := @this: spark.route.Routes,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routeEntry = (spark.route.RouteEntry) $stack8,203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, routeEntry = (spark.route.RouteEntry) $stack8, 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack9 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>,198,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack9 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>, 198))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
	"line": 52
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 198
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 198
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 198
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = interfaceinvoke acceptedTypes.<java.util.Map: boolean containsKey(java.lang.Object)>($stack9)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
					"line": 198
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri),116,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType),117,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body),118,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper),119,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper),120,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response),121,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod),122,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,context := @parameter0: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack26 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(),52,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack26 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 52)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>,$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>,121,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack26 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 46)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(),52,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 52)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack25.<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)>($stack26),52,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack25.<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)>($stack26), 52))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>",
					"line": 121
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>",
	"line": 121
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 52
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 52
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 116
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 118
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 119
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 120
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 121
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 122
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": -1
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 52
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack26 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 52
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),42,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 42)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
					"line": 105
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 42
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
					"line": 93
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack19,59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack19, 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23),41,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23), 41)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request),45,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request), 45)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack19,59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack19, 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23),41,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23), 41)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request),45,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request), 45))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
					"line": 105
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 41
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 45
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 41
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 45
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request)",
				"location": {
					"file": "",
					"class": "spark.http.matching.BeforeFilters",
					"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 45
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),42,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 42)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack50 = virtualinvoke $stack46.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack47, $stack48, $stack49),42,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack50 = virtualinvoke $stack46.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack47, $stack48, $stack49), 42)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),42,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 42)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack50 = virtualinvoke $stack46.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack47, $stack48, $stack49),42,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack50 = virtualinvoke $stack46.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack47, $stack48, $stack49), 42))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
					"line": 105
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 42
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 42
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 42
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 42
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack50 = virtualinvoke $stack46.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack47, $stack48, $stack49)",
				"location": {
					"file": "",
					"class": "spark.http.matching.Routes",
					"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
					"line": 42
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType), 224)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,this := @this: spark.route.Routes,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType), 224))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
	"line": 52
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
					"line": 224
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType), 224)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack13 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch),226,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack13 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 226)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,this := @this: spark.route.Routes,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType), 224)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack13 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch),226,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack13 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 226))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
	"line": 52
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 226
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 226
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
					"line": 226
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>,matchSet = $stack6,211,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack6",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
					"line": 211
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
	"line": 211
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
					"line": 197
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33),53,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33), 53)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack35.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request),54,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack35.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request), 54)) SINK=>BASE: Node(<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>,$stack1 = this.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest>,101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack23 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(), 41)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack33 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(),53,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack33 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(), 53)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33),53,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33), 53)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack35.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request),54,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack35.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request), 54))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>",
	"line": 101
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 53
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 53
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 54
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 53
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 54
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack35.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request)",
				"location": {
					"file": "",
					"class": "spark.http.matching.Routes",
					"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
					"line": 54
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri),116,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String acceptType> = acceptType,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String acceptType> = acceptType, 66)) => Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),38,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>(context), 140) => (<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 38)) => Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,acceptType := @parameter2: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,header := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne = virtualinvoke header.<java.lang.String: java.lang.String[] split(java.lang.String)>(','), 176)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne = virtualinvoke header.<java.lang.String: java.lang.String[] split(java.lang.String)>(','), 176)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),38,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 38)) => Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,acceptType := @parameter2: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,header := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,l0 := @this: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne = virtualinvoke header.<java.lang.String: java.lang.String[] split(java.lang.String)>(','), 176)) => Node(<java.lang.String: java.lang.String[] split(java.lang.String)>,$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0),2422,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne = virtualinvoke header.<java.lang.String: java.lang.String[] split(java.lang.String)>(','), 176))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
					"line": 109
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 38
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 116
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": 66
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.DoneFilters",
	"method": "<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 38
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
	"line": 2422
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack2 = virtualinvoke l0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(l1, 0)",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: java.lang.String[] split(java.lang.String)>",
					"line": 2422
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri),116,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String acceptType> = acceptType,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String acceptType> = acceptType, 66)) => Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),38,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 38)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),38,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 38))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
					"line": 109
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 38
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 116
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": 66
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 38
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 38
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routeEntry = (spark.route.RouteEntry) $stack8,203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, routeEntry = (spark.route.RouteEntry) $stack8, 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,interfaceinvoke acceptedTypes.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack12, routeEntry),199,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, interfaceinvoke acceptedTypes.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack12, routeEntry), 199)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>,matchSet = $stack6,211,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routeEntry = (spark.route.RouteEntry) $stack8,203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, routeEntry = (spark.route.RouteEntry) $stack8, 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack12 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>,199,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack12 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>, 199))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack6",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
					"line": 211
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
	"line": 211
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 199
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 199
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke acceptedTypes.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($stack12, routeEntry)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
					"line": 199
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,supported := @parameter0: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(),180,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(), 180)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(),188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(), 188)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,s#5 = (java.lang.String) $stack19,188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, s#5 = (java.lang.String) $stack19, 188)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,mimeType := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,range := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,results = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMimeType(java.lang.String)>(range),91,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType),141,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType), 141)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>,153,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>, 153)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980)) SINK=>BASE: Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,parseResults = $stack8,174,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, parseResults = $stack8, 174)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,parsedRanges := @parameter1: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,l5 = interfaceinvoke parsedRanges.<java.util.Collection: java.util.Iterator iterator()>(),143,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, l5 = interfaceinvoke parsedRanges.<java.util.Collection: java.util.Iterator iterator()>(), 143)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack15 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),163,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack15 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 163)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,range = (spark.utils.MimeParse$ParseResults) $stack15,163,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, range = (spark.utils.MimeParse$ParseResults) $stack15, 163)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack19 = range.<spark.utils.MimeParse$ParseResults: java.lang.String subType>,145,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack19 = range.<spark.utils.MimeParse$ParseResults: java.lang.String subType>, 145)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack7 = l1 instanceof java.lang.String,980,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack7 = l1 instanceof java.lang.String, 980))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "parseResults = $stack8",
				"location": {
					"file": "",
					"class": "spark.utils.MimeParse",
					"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
					"line": 174
				},
				"stackTrace": [{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 174
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 143
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 163
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 163
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 145
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 980
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 180
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": 91
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 141
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 153
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 980
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack7 = l1 instanceof java.lang.String",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 980
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),42,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack48 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 42)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
					"line": 105
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 42
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
					"line": 223
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack19,59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack19, 59)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,matchSet = $stack9,107,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 59))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack9",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
					"line": 107
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 107
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "filterMatch = (spark.routematch.RouteMatch) $stack19",
				"location": {
					"file": "",
					"class": "spark.http.matching.BeforeFilters",
					"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 59
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,supported := @parameter0: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(),180,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(), 180)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(),188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(), 188)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,s#5 = (java.lang.String) $stack19,188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, s#5 = (java.lang.String) $stack19, 188)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,mimeType := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,range := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,results = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMimeType(java.lang.String)>(range),91,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType),141,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType), 141)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>,153,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>, 153)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983)) SINK=>BASE: Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack32 = target.<spark.utils.MimeParse$ParseResults: java.lang.String subType>,154,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack32 = target.<spark.utils.MimeParse$ParseResults: java.lang.String subType>, 154)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack9 = l2.<java.lang.String: char[] value>,983,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack9 = l2.<java.lang.String: char[] value>, 983)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack10 = lengthof $stack9,983,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack10 = lengthof $stack9, 983))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack32 = target.<spark.utils.MimeParse$ParseResults: java.lang.String subType>",
				"location": {
					"file": "",
					"class": "spark.utils.MimeParse",
					"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
					"line": 154
				},
				"stackTrace": [{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 154
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 983
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 983
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 180
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": 91
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 141
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 153
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 983
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack9 = l2.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 983
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,supported := @parameter0: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(),180,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(), 180)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(),188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(), 188)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,s#5 = (java.lang.String) $stack19,188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, s#5 = (java.lang.String) $stack19, 188)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,mimeType := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,range := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,results = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMimeType(java.lang.String)>(range),91,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType),141,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType), 141)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>,153,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>, 153)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) SINK=>BASE: Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,parseResults = $stack8,174,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, parseResults = $stack8, 174)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,parsedRanges := @parameter1: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,l5 = interfaceinvoke parsedRanges.<java.util.Collection: java.util.Iterator iterator()>(),143,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, l5 = interfaceinvoke parsedRanges.<java.util.Collection: java.util.Iterator iterator()>(), 143)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack15 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(),163,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack15 = interfaceinvoke l5.<java.util.Iterator: java.lang.Object next()>(), 163)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,range = (spark.utils.MimeParse$ParseResults) $stack15,163,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, range = (spark.utils.MimeParse$ParseResults) $stack15, 163)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack19 = range.<spark.utils.MimeParse$ParseResults: java.lang.String subType>,145,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack19 = range.<spark.utils.MimeParse$ParseResults: java.lang.String subType>, 145)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "parseResults = $stack8",
				"location": {
					"file": "",
					"class": "spark.utils.MimeParse",
					"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
					"line": 174
				},
				"stackTrace": [{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 174
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 143
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 163
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 163
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 145
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 985
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 180
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": 91
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 141
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 153
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 985
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l5 = l2.<java.lang.String: char[] value>",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 985
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,supported := @parameter0: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(),180,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(), 180)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(),188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(), 188)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,s#5 = (java.lang.String) $stack19,188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, s#5 = (java.lang.String) $stack19, 188)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,mimeType := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,range := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,results = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMimeType(java.lang.String)>(range),91,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType),141,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType), 141)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>,153,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>, 153)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,this := @this: spark.route.Routes,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,supported := @parameter0: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(),180,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(), 180)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(),188,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(), 188)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,s#5 = (java.lang.String) $stack19,188,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, s#5 = (java.lang.String) $stack19, 188)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,mimeType := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType),141,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType), 141)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack22 = target.<spark.utils.MimeParse$ParseResults: java.util.Map params>,147,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack22 = target.<spark.utils.MimeParse$ParseResults: java.util.Map params>, 147)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack23 = interfaceinvoke $stack22.<java.util.Map: java.util.Set keySet()>(),147,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack23 = interfaceinvoke $stack22.<java.util.Map: java.util.Set keySet()>(), 147)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,l7 = interfaceinvoke $stack23.<java.util.Set: java.util.Iterator iterator()>(),147,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, l7 = interfaceinvoke $stack23.<java.util.Set: java.util.Iterator iterator()>(), 147)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack27 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>(),162,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack27 = interfaceinvoke l7.<java.util.Iterator: java.lang.Object next()>(), 162)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,k = (java.lang.String) $stack27,162,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, k = (java.lang.String) $stack27, 162)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack59 = interfaceinvoke $stack57.<java.util.Map: java.lang.Object get(java.lang.Object)>(k),150,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack59 = interfaceinvoke $stack57.<java.util.Map: java.lang.Object get(java.lang.Object)>(k), 150)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
	"line": 52
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 180
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 141
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 147
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 147
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 147
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 162
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 162
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 150
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 180
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": 91
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 141
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 153
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l2 = (java.lang.String) l1",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 981
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri),116,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType),117,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body),118,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper),119,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper),120,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response),121,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod),122,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,context := @parameter0: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128)) => Node(<spark.http.matching.RouteContext: spark.http.matching.Body body()>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(), 33)) => Node(<spark.http.matching.RouteContext: spark.http.matching.Body body()>,$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.Body body>,113,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(), 33)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack17 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(),65,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack17 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(), 65)) SINK=>BASE: Node(<spark.Response: java.lang.String body()>,$stack1 = this.<spark.Response: java.lang.String body>,102,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, bodyAfterFilter = virtualinvoke $stack30.<spark.Response: java.lang.String body()>(), 50)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,bodyAfterFilter = virtualinvoke $stack29.<spark.Response: java.lang.String body()>(),57,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, bodyAfterFilter = virtualinvoke $stack29.<spark.Response: java.lang.String body()>(), 57)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,content = bodyAfterFilter,60,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, content = bodyAfterFilter, 60)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack17.<spark.http.matching.Body: void set(java.lang.Object)>(content),65,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack17.<spark.http.matching.Body: void set(java.lang.Object)>(content), 65))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.Response: java.lang.String body>",
				"location": {
					"file": "",
					"class": "spark.Response",
					"method": "<spark.Response: java.lang.String body()>",
					"line": 102
				},
				"stackTrace": [{
	"class": "spark.Response",
	"method": "<spark.Response: java.lang.String body()>",
	"line": 102
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 57
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 60
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 65
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 116
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 118
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 119
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 120
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 121
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 122
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.Body body()>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.Body body()>",
	"line": 113
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 65
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack17 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 65
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33),53,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33), 53)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33),53,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33), 53))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
					"line": 105
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 53
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 53
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, $stack33)",
				"location": {
					"file": "",
					"class": "spark.http.matching.Routes",
					"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
					"line": 53
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0),233,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0), 233)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack7 = (spark.route.RouteEntry) $stack6,233,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType),94,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,$stack10 = entry.<spark.route.RouteEntry: java.lang.Object target>,95,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack10 = entry.<spark.route.RouteEntry: java.lang.Object target>, 95)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack49 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),42,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack49 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 42)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,acceptType := @parameter2: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType),94,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,$stack10 = entry.<spark.route.RouteEntry: java.lang.Object target>,95,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack10 = entry.<spark.route.RouteEntry: java.lang.Object target>, 95)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,specialinvoke $stack8.<spark.routematch.RouteMatch: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>($stack10, $stack9, path, acceptType),95,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, specialinvoke $stack8.<spark.routematch.RouteMatch: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>($stack10, $stack9, path, acceptType), 95))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
					"line": 109
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 42
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 94
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 95
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 95
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 233
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 233
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 94
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 95
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack10 = entry.<spark.route.RouteEntry: java.lang.Object target>",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
					"line": 95
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack11 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.util.Set keySet()>(), 224)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,supported := @parameter0: java.util.Collection,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(),180,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, lastOne#4 = interfaceinvoke supported.<java.util.Collection: java.util.Iterator iterator()>(), 180)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(),188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack19 = interfaceinvoke lastOne#4.<java.util.Iterator: java.lang.Object next()>(), 188)) => Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,s#5 = (java.lang.String) $stack19,188,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, s#5 = (java.lang.String) $stack19, 188)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,mimeType := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,range := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>,results = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMimeType(java.lang.String)>(range),91,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, $stack23 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(r), 177)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType),141,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, target = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>(mimeType), 141)) => Node(<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>,$stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>,153,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112) => (<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>, fitnessAndQuality#6 = staticinvoke <spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>(s#5, parseResults), 181) => (<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>, $stack29 = target.<spark.utils.MimeParse$ParseResults: java.lang.String type>, 153)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988)) SINK=>BASE: Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack18 = lastOne#7.<spark.utils.MimeParse$FitnessAndQuality: java.lang.String mimeType>,188,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType),112,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>,bestMatch := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l1 := @parameter0: java.lang.Object,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, consumedByStaticFile = virtualinvoke $stack20.<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 92) => (<spark.staticfiles.StaticFilesConfiguration: boolean consume(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack4 = specialinvoke this.<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>(httpRequest, httpResponse), 73) => (<spark.staticfiles.StaticFilesConfiguration: boolean consumeWithFileResourceHandlers(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)>, $stack15 = virtualinvoke resource.<spark.resource.AbstractFileResolvingResource: boolean isReadable()>(), 109) => (<spark.resource.AbstractFileResolvingResource: boolean isReadable()>, $stack4 = staticinvoke <spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>(url), 109) => (<spark.utils.ResourceUtils: boolean isFileURL(java.net.URL)>, $stack4 = virtualinvoke $stack3.<java.lang.String: boolean equals(java.lang.Object)>(protocol), 270)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l2 = (java.lang.String) l1,981,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l2 = (java.lang.String) l1, 981)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,l5 = l2.<java.lang.String: char[] value>,985,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, l5 = l2.<java.lang.String: char[] value>, 985)) => Node(<java.lang.String: boolean equals(java.lang.Object)>,$stack13 = l5[l6],988,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack23 = specialinvoke this.<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>(bestMatch), 114) => (<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>, $stack3 = virtualinvoke $stack2.<java.lang.String: boolean equals(java.lang.Object)>(bestMatch), 207) => (<java.lang.String: boolean equals(java.lang.Object)>, $stack13 = l5[l6], 988))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack18 = lastOne#7.<spark.utils.MimeParse$FitnessAndQuality: java.lang.String mimeType>",
				"location": {
					"file": "",
					"class": "spark.utils.MimeParse",
					"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
					"line": 188
				},
				"stackTrace": [{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 112
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: boolean routeWithGivenAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 985
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 180
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": -1
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$ParseResults parseMediaRange(java.lang.String)>",
	"line": 91
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 141
},{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: spark.utils.MimeParse$FitnessAndQuality fitnessAndQualityParsed(java.lang.String,java.util.Collection)>",
	"line": 153
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": -1
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 981
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 985
},{
	"class": "java.lang.String",
	"method": "<java.lang.String: boolean equals(java.lang.Object)>",
	"line": 988
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack13 = l5[l6]",
				"location": {
					"file": "",
					"class": "java.lang.String",
					"method": "<java.lang.String: boolean equals(java.lang.Object)>",
					"line": 988
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
					"line": 105
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 66
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack31),46,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack31), 46)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack33.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request),47,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack33.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request), 47)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>,$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper>,117,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>(), 45)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack33 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>(),47,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack33 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>(), 47)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack33.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request),47,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack33.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request), 47))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>",
					"line": 117
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>",
	"line": 117
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 47
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 47
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 46
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 47
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack33.<spark.http.matching.RequestWrapper: void setDelegate(spark.Request)>(request)",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 47
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 66)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.routematch.RouteMatch,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.routematch.RouteMatch: java.lang.Object target>,48,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,request#3 = (spark.FilterImpl) filterTarget,54,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, request#3 = (spark.FilterImpl) filterTarget, 54)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack27, $stack28),55,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack27, $stack28), 55)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>,$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>,121,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack26 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 46)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack28 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(),55,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack28 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 55)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack27, $stack28),55,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack27, $stack28), 55))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>",
					"line": 121
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>",
	"line": 121
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 55
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 55
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.routematch.RouteMatch",
	"method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.routematch.RouteMatch",
	"method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
	"line": 48
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 41
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 54
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 55
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke request#3.<spark.FilterImpl: void handle(spark.Request,spark.Response)>($stack27, $stack28)",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 55
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri),116,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType),117,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body),118,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper),119,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper),120,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response),121,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod),122,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,context := @parameter0: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(),57,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 57)) SINK=>BASE: Node(<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>,$stack8 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(),34,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>(context), 140) => (<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>, $stack8 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(), 34)) => Node(<spark.http.matching.Body: java.lang.Object get()>,this := @this: spark.http.matching.Body,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, content = virtualinvoke $stack9.<spark.http.matching.Body: java.lang.Object get()>(), 33)) => Node(<spark.http.matching.Body: java.lang.Object get()>,$stack1 = this.<spark.http.matching.Body: java.lang.Object content>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, content = virtualinvoke $stack9.<spark.http.matching.Body: java.lang.Object get()>(), 33)) => Node(<spark.Response: java.lang.String body()>,$stack1 = this.<spark.Response: java.lang.String body>,102,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, bodyAfterFilter = virtualinvoke $stack30.<spark.Response: java.lang.String body()>(), 50)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,bodyAfterFilter = virtualinvoke $stack29.<spark.Response: java.lang.String body()>(),57,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, bodyAfterFilter = virtualinvoke $stack29.<spark.Response: java.lang.String body()>(), 57))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack8 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.DoneFilters",
					"method": "<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 34
				},
				"stackTrace": [{
	"class": "spark.http.matching.DoneFilters",
	"method": "<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Body",
	"method": "<spark.http.matching.Body: java.lang.Object get()>",
	"line": -1
},{
	"class": "spark.http.matching.Body",
	"method": "<spark.http.matching.Body: java.lang.Object get()>",
	"line": 52
},{
	"class": "spark.Response",
	"method": "<spark.Response: java.lang.String body()>",
	"line": 102
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 57
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 116
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 118
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 119
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 120
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 121
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 122
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": -1
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 57
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack29 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 57
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack5 = interfaceinvoke routeMatches.<java.util.List: int size()>(),232,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack5 = interfaceinvoke routeMatches.<java.util.List: int size()>(), 232)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>,matchSet = $stack6,211,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack5 = interfaceinvoke routeMatches.<java.util.List: int size()>(),232,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack5 = interfaceinvoke routeMatches.<java.util.List: int size()>(), 232))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack6",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
					"line": 211
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
	"line": 211
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 232
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 232
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack5 = interfaceinvoke routeMatches.<java.util.List: int size()>()",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
					"line": 232
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches),223,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack14 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.lang.Object get(java.lang.Object)>(bestMatch),227,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack14 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.lang.Object get(java.lang.Object)>(bestMatch), 227)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack15 = (spark.route.RouteEntry) $stack14,227,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) SINK=>BASE: Node(<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>,$stack18 = lastOne#7.<spark.utils.MimeParse$FitnessAndQuality: java.lang.String mimeType>,188,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack21, acceptType), 112)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType),224,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, bestMatch = staticinvoke <spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>($stack11, acceptType), 224)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack14 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.lang.Object get(java.lang.Object)>(bestMatch),227,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack14 = interfaceinvoke acceptedMimeTypes.<java.util.Map: java.lang.Object get(java.lang.Object)>(bestMatch), 227)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack15 = (spark.route.RouteEntry) $stack14,227,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack18 = lastOne#7.<spark.utils.MimeParse$FitnessAndQuality: java.lang.String mimeType>",
				"location": {
					"file": "",
					"class": "spark.utils.MimeParse",
					"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
					"line": 188
				},
				"stackTrace": [{
	"class": "spark.utils.MimeParse",
	"method": "<spark.utils.MimeParse: java.lang.String bestMatch(java.util.Collection,java.lang.String)>",
	"line": 188
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 224
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 227
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 227
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 223
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 227
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 227
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack15 = (spark.route.RouteEntry) $stack14",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
					"line": 227
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack24.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(filterMatch),49,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack24.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(filterMatch), 49)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),38,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 38)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack24.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(filterMatch),49,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack24.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(filterMatch), 49))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
					"line": 109
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 38
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 49
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 49
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack24.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(filterMatch)",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 49
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>,matchSet = $stack9,107,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack9",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
					"line": 107
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 107
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13)",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 36
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack19,59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack19, 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23),41,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23), 41)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14),35,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 37)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,$stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack19 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack19,59,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack19, 59)) => Node(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23),41,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23), 41))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
	"line": 52
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 41
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 35
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 59
},{
	"class": "spark.http.matching.BeforeFilters",
	"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 41
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23)",
				"location": {
					"file": "",
					"class": "spark.http.matching.BeforeFilters",
					"method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 41
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(match),56,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(match), 56)) SINK=>BASE: Node(<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>,$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>,52,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(match),56,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(match), 56))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
					"line": 52
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
	"line": 52
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 56
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 56
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke $stack25.<spark.http.matching.RequestWrapper: void changeMatch(spark.routematch.RouteMatch)>(match)",
				"location": {
					"file": "",
					"class": "spark.http.matching.Routes",
					"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
					"line": 56
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0),233,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, $stack6 = interfaceinvoke routeMatches.<java.util.List: java.lang.Object get(int)>(0), 233)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,$stack7 = (spark.route.RouteEntry) $stack6,233,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType),94,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>,matchSet = $stack6,211,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType),94,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack6",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
					"line": 211
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
	"line": 211
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 94
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 233
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": 233
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 94
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType)",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
					"line": 94
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>,$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),34,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,path := @parameter1: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 203)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routeEntry = (spark.route.RouteEntry) $stack8,203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, routeEntry = (spark.route.RouteEntry) $stack8, 203)) SINK=>BASE: Node(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>,matchSet = $stack6,211,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35) => (<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)) => Node(<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>,routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path),93,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 93)) => Node(<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>,routeMatches := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,routes := @parameter0: java.util.List,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(),197,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, l3 = interfaceinvoke routes.<java.util.List: java.util.Iterator iterator()>(), 197)) => Node(<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>,$stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),203,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127) => (<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34) => (<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>, entry = specialinvoke this.<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>(routeEntries, acceptType), 94) => (<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>, acceptedMimeTypes = specialinvoke this.<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>(routeMatches), 223) => (<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>, $stack8 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 203))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "matchSet = $stack6",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
					"line": 211
				},
				"stackTrace": [{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
	"line": 211
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.Routes",
	"method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
	"line": 34
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
	"line": 93
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: spark.route.RouteEntry findTargetWithGivenAcceptType(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": -1
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 197
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
},{
	"class": "spark.route.Routes",
	"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
	"line": 203
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "routeEntry = (spark.route.RouteEntry) $stack8",
				"location": {
					"file": "",
					"class": "spark.route.Routes",
					"method": "<spark.route.Routes: java.util.Map getAcceptedMimeTypes(java.util.List)>",
					"line": 203
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack16 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack16 = interfaceinvoke l3.<java.util.Iterator: boolean hasNext()>(), 40))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
					"line": 105
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 40
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,uri := @parameter0: java.lang.String,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>,this.<spark.http.matching.RouteContext: java.lang.String uri> = uri,81,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116) => (<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)) => Node(<spark.http.matching.RouteContext: java.lang.String uri()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>,105,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(),37,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 66)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.routematch.RouteMatch,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.routematch.RouteMatch: java.lang.Object target>,48,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack20 = filterTarget instanceof spark.FilterImpl,43,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack20 = filterTarget instanceof spark.FilterImpl, 43)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),38,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 38)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 66)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,this := @this: spark.routematch.RouteMatch,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)) => Node(<spark.routematch.RouteMatch: java.lang.Object getTarget()>,$stack1 = this.<spark.routematch.RouteMatch: java.lang.Object target>,48,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(),41,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 41)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack20 = filterTarget instanceof spark.FilterImpl,43,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack20 = filterTarget instanceof spark.FilterImpl, 43))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
					"line": 109
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 38
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.routematch.RouteMatch",
	"method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.routematch.RouteMatch",
	"method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
	"line": 48
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 41
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 43
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
	"line": 81
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
	"line": 105
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 37
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.routematch.RouteMatch",
	"method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
	"line": -1
},{
	"class": "spark.routematch.RouteMatch",
	"method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
	"line": 48
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 41
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 43
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack20 = filterTarget instanceof spark.FilterImpl",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 43
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(),101,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri),116,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType),117,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body),118,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper),119,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)) => Node(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>,this := @this: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper),120,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response),121,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)) => Node(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>,context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod),122,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,context := @parameter0: spark.http.matching.RouteContext,-1,SimpleNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack31 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(),46,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack31 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(), 46)) SINK=>BASE: Node(<spark.http.matching.RouteContext: java.lang.String acceptType()>,$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>,109,SourceNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126) => (<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(),38,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 38)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13),36,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack10.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack11, $stack12, $stack13), 36)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(),40,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, l3 = interfaceinvoke matchSet.<java.util.List: java.util.Iterator iterator()>(), 40)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,$stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(),66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, $stack18 = interfaceinvoke l3.<java.util.Iterator: java.lang.Object next()>(), 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,filterMatch = (spark.routematch.RouteMatch) $stack18,66,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, filterMatch = (spark.routematch.RouteMatch) $stack18, 66)) => Node(<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>,request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack31),46,SinkNode, path: (<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>(context), 128) => (<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack31), 46))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
				"location": {
					"file": "",
					"class": "spark.http.matching.RouteContext",
					"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
					"line": 109
				},
				"stackTrace": [{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
	"line": 109
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 38
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 36
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 40
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 66
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 46
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.MatcherFilter",
					"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
					"line": 101
				},
				"stackTrace": [{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 101
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 116
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 117
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 118
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 119
},{
	"class": "spark.http.matching.RouteContext",
	"method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>",
	"line": -1
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 120
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 121
},{
	"class": "spark.http.matching.MatcherFilter",
	"method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
	"line": 122
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": -1
},{
	"class": "spark.http.matching.AfterFilters",
	"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
	"line": 46
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "$stack31 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>()",
				"location": {
					"file": "",
					"class": "spark.http.matching.AfterFilters",
					"method": "<spark.http.matching.AfterFilters: void execute(spark.http.matching.RouteContext)>",
					"line": 46
				}
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack26 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack26 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.ResponseWrapper responseWrapper()>(), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String acceptType>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String acceptType()>",
  "line": "109"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack14 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String acceptType()>(), 35)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "uri := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this.<spark.http.matching.RouteContext: java.lang.String uri> = uri",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
  "line": "81"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)","(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
  "line": "105"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.DoneFilters",
  "method": "<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "37"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>(context), 140)","(<spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>, $stack12 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 37)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "108"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "110"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>(), 110)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntry = (spark.route.RouteEntry) $stack13",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntry = (spark.route.RouteEntry) $stack13, 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack26 = routeEntry.<spark.route.RouteEntry: java.lang.Object target>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "115"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack26 = routeEntry.<spark.route.RouteEntry: java.lang.Object target>, 115)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>",
  "line": "52"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "108"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "110"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>(), 110)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
  "line": "105"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "path := @parameter1: java.lang.String",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "requestUri := @parameter2: java.lang.String",
"location": {
  "file": "",
  "class": "spark.routematch.RouteMatch",
  "method": "<spark.routematch.RouteMatch: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, specialinvoke $stack24.<spark.routematch.RouteMatch: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>($stack26, $stack25, path, acceptType), 115)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<spark.routematch.RouteMatch: java.lang.String requestURI> = requestUri",
"location": {
  "file": "",
  "class": "spark.routematch.RouteMatch",
  "method": "<spark.routematch.RouteMatch: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>",
  "line": "33"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, specialinvoke $stack24.<spark.routematch.RouteMatch: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>($stack26, $stack25, path, acceptType), 115)","(<spark.routematch.RouteMatch: void <init>(java.lang.Object,java.lang.String,java.lang.String,java.lang.String)>, this.<spark.routematch.RouteMatch: java.lang.String requestURI> = requestUri, 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "108"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "110"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>(), 110)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 122)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<spark.route.Routes: java.util.List routes>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack7 = this.<spark.route.Routes: java.util.List routes>, 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), 217)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<spark.route.Routes: java.util.List routes>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack7 = this.<spark.route.Routes: java.util.List routes>, 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), 217)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "entry = (spark.route.RouteEntry) $stack10",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, entry = (spark.route.RouteEntry) $stack10, 217)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.RouteEntry",
"location": {
  "file": "",
  "class": "spark.route.RouteEntry",
  "method": "<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 213)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack5 = this.<spark.route.RouteEntry: spark.route.HttpMethod httpMethod>",
"location": {
  "file": "",
  "class": "spark.route.RouteEntry",
  "method": "<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>",
  "line": "46"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 213)","(<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>, $stack5 = this.<spark.route.RouteEntry: spark.route.HttpMethod httpMethod>, 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.Body body()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(), 33)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.Body body>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.Body body()>",
  "line": "113"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack9 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.Body body()>(), 33)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>(), 45)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack25 = virtualinvoke context.<spark.http.matching.RouteContext: spark.http.matching.RequestWrapper requestWrapper()>(), 45)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<spark.route.Routes: java.util.List routes>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack7 = this.<spark.route.Routes: java.util.List routes>, 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), 217)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "entry = (spark.route.RouteEntry) $stack10",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, entry = (spark.route.RouteEntry) $stack10, 217)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.RouteEntry",
"location": {
  "file": "",
  "class": "spark.route.RouteEntry",
  "method": "<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 213)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack6 = this.<spark.route.RouteEntry: spark.route.HttpMethod httpMethod>",
"location": {
  "file": "",
  "class": "spark.route.RouteEntry",
  "method": "<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>",
  "line": "53"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 213)","(<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>, $stack6 = this.<spark.route.RouteEntry: spark.route.HttpMethod httpMethod>, 53)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "46"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 46)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "delegate := @parameter0: spark.Response",
"location": {
  "file": "",
  "class": "spark.http.matching.ResponseWrapper",
  "method": "<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack26.<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)>($stack27), 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<spark.http.matching.ResponseWrapper: spark.Response delegate> = delegate",
"location": {
  "file": "",
  "class": "spark.http.matching.ResponseWrapper",
  "method": "<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)>",
  "line": "38"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, virtualinvoke $stack26.<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)>($stack27), 46)","(<spark.http.matching.ResponseWrapper: void setDelegate(spark.Response)>, this.<spark.http.matching.ResponseWrapper: spark.Response delegate> = delegate, 38)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "staticinvoke <spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>(context)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "140"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.DoneFilters: void execute(spark.http.matching.RouteContext)>(context), 140)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "108"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<spark.route.Routes: java.util.List routes>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack7 = this.<spark.route.Routes: java.util.List routes>, 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), 217)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "entry = (spark.route.RouteEntry) $stack10",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, entry = (spark.route.RouteEntry) $stack10, 217)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke matchSet.<java.util.List: boolean add(java.lang.Object)>(entry)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "214"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, interfaceinvoke matchSet.<java.util.List: boolean add(java.lang.Object)>(entry), 214)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "uri := @parameter0: java.lang.String",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this.<spark.http.matching.RouteContext: java.lang.String uri> = uri",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>",
  "line": "81"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)","(<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>, this.<spark.http.matching.RouteContext: java.lang.String uri> = uri, 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
  "line": "105"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.Routes",
  "method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
  "line": "34"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127)","(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 34)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12)",
"location": {
  "file": "",
  "class": "spark.http.matching.Routes",
  "method": "<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>",
  "line": "34"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>(context), 127)","(<spark.http.matching.Routes: void execute(spark.http.matching.RouteContext)>, match = virtualinvoke $stack9.<spark.route.Routes: spark.routematch.RouteMatch find(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack10, $stack11, $stack12), 34)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.routematch.RouteMatch",
"location": {
  "file": "",
  "class": "spark.routematch.RouteMatch",
  "method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.routematch.RouteMatch: java.lang.Object target>",
"location": {
  "file": "",
  "class": "spark.routematch.RouteMatch",
  "method": "<spark.routematch.RouteMatch: java.lang.Object getTarget()>",
  "line": "48"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, filterTarget = virtualinvoke filterMatch.<spark.routematch.RouteMatch: java.lang.Object getTarget()>(), 38)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: java.lang.String uri>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: java.lang.String uri()>",
  "line": "105"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack13 = virtualinvoke context.<spark.http.matching.RouteContext: java.lang.String uri()>(), 35)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<spark.route.Routes: java.util.List routes>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack7 = this.<spark.route.Routes: java.util.List routes>, 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "108"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "110"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>(), 110)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntry = (spark.route.RouteEntry) $stack13",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntry = (spark.route.RouteEntry) $stack13, 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack16 = routeEntry.<spark.route.RouteEntry: java.lang.Object target>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack16 = routeEntry.<spark.route.RouteEntry: java.lang.Object target>, 118)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<spark.route.Routes: java.util.List routes>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack7 = this.<spark.route.Routes: java.util.List routes>, 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), 217)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "entry = (spark.route.RouteEntry) $stack10",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, entry = (spark.route.RouteEntry) $stack10, 217)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.RouteEntry",
"location": {
  "file": "",
  "class": "spark.route.RouteEntry",
  "method": "<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 213)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "match = specialinvoke this.<spark.route.RouteEntry: boolean matchPath(java.lang.String)>(path)",
"location": {
  "file": "",
  "class": "spark.route.RouteEntry",
  "method": "<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>",
  "line": "54"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 213)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "108"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "110"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, l6 = interfaceinvoke routeEntries.<java.util.List: java.util.Iterator iterator()>(), 110)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack13 = interfaceinvoke l6.<java.util.Iterator: java.lang.Object next()>(), 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "routeEntry = (spark.route.RouteEntry) $stack13",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntry = (spark.route.RouteEntry) $stack13, 122)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack20 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "112"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, $stack20 = routeEntry.<spark.route.RouteEntry: java.lang.String acceptedType>, 112)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "35"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack11 = virtualinvoke context.<spark.http.matching.RouteContext: spark.route.Routes routeMatcher()>(), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.route.Routes",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack7 = this.<spark.route.Routes: java.util.List routes>",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack7 = this.<spark.route.Routes: java.util.List routes>, 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "212"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, l4 = interfaceinvoke $stack7.<java.util.List: java.util.Iterator iterator()>(), 212)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>()",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack10 = interfaceinvoke l4.<java.util.Iterator: java.lang.Object next()>(), 217)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "entry = (spark.route.RouteEntry) $stack10",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "217"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, entry = (spark.route.RouteEntry) $stack10, 217)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path)",
"location": {
  "file": "",
  "class": "spark.route.Routes",
  "method": "<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>",
  "line": "213"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, matchSet = virtualinvoke $stack11.<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>($stack12, $stack13, $stack14), 35)","(<spark.route.Routes: java.util.List findMultiple(spark.route.HttpMethod,java.lang.String,java.lang.String)>, routeEntries = specialinvoke this.<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 108)","(<spark.route.Routes: java.util.List findTargetsForRequestedRoute(spark.route.HttpMethod,java.lang.String)>, $stack11 = virtualinvoke entry.<spark.route.RouteEntry: boolean matches(spark.route.HttpMethod,java.lang.String)>(httpMethod, path), 213)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack23 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(), 41)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack23 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack23 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "41"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack23 = virtualinvoke context.<spark.http.matching.RouteContext: javax.servlet.http.HttpServletRequest httpRequest()>(), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "request := @parameter1: javax.servlet.http.HttpServletRequest",
"location": {
  "file": "",
  "class": "spark.RequestResponseFactory",
  "method": "<spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23), 41)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "request := @parameter1: javax.servlet.http.HttpServletRequest",
"location": {
  "file": "",
  "class": "spark.Request",
  "method": "<spark.Request: void <init>(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23), 41)","(<spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 30)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "this.<spark.Request: javax.servlet.http.HttpServletRequest servletRequest> = request",
"location": {
  "file": "",
  "class": "spark.Request",
  "method": "<spark.Request: void <init>(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, request = staticinvoke <spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(filterMatch, $stack23), 41)","(<spark.RequestResponseFactory: spark.Request create(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>, specialinvoke $stack2.<spark.Request: void <init>(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>(match, request), 30)","(<spark.Request: void <init>(spark.routematch.RouteMatch,javax.servlet.http.HttpServletRequest)>, this.<spark.Request: javax.servlet.http.HttpServletRequest servletRequest> = request, 101)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.Response response()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.Response response>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.Response response()>",
  "line": "125"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.ResponseWrapper: spark.Response delegate>",
"location": {
  "file": "",
  "class": "spark.http.matching.ResponseWrapper",
  "method": "<spark.http.matching.ResponseWrapper: spark.Response getDelegate()>",
  "line": "42"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.GeneralError: void modify(javax.servlet.http.HttpServletResponse,spark.http.matching.Body,spark.http.matching.RequestWrapper,spark.http.matching.ResponseWrapper,java.lang.Exception)>(httpResponse, body, requestWrapper, responseWrapper, generalException), 142)","(<spark.http.matching.GeneralError: void modify(javax.servlet.http.HttpServletResponse,spark.http.matching.Body,spark.http.matching.RequestWrapper,spark.http.matching.ResponseWrapper,java.lang.Exception)>, $stack9 = virtualinvoke responseWrapper.<spark.http.matching.ResponseWrapper: spark.Response getDelegate()>(), 44)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack9 = virtualinvoke responseWrapper.<spark.http.matching.ResponseWrapper: spark.Response getDelegate()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.GeneralError",
  "method": "<spark.http.matching.GeneralError: void modify(javax.servlet.http.HttpServletResponse,spark.http.matching.Body,spark.http.matching.RequestWrapper,spark.http.matching.ResponseWrapper,java.lang.Exception)>",
  "line": "44"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.GeneralError: void modify(javax.servlet.http.HttpServletResponse,spark.http.matching.Body,spark.http.matching.RequestWrapper,spark.http.matching.ResponseWrapper,java.lang.Exception)>(httpResponse, body, requestWrapper, responseWrapper, generalException), 142)","(<spark.http.matching.GeneralError: void modify(javax.servlet.http.HttpServletResponse,spark.http.matching.Body,spark.http.matching.RequestWrapper,spark.http.matching.ResponseWrapper,java.lang.Exception)>, $stack9 = virtualinvoke responseWrapper.<spark.http.matching.ResponseWrapper: spark.Response getDelegate()>(), 44)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.Response response()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.Response response>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.Response response()>",
  "line": "125"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 46)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>()",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "101"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, uri = interfaceinvoke httpRequest.<javax.servlet.http.HttpServletRequest: java.lang.String getRequestURI()>(), 101)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "116"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack35 = virtualinvoke $stack34.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withUri(java.lang.String)>(uri), 116)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "117"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack36 = virtualinvoke $stack35.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withAcceptType(java.lang.String)>(acceptType), 117)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "118"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack37 = virtualinvoke $stack36.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withBody(spark.http.matching.Body)>(body), 118)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "119"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack38 = virtualinvoke $stack37.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withRequestWrapper(spark.http.matching.RequestWrapper)>(requestWrapper), 119)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "120"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack39 = virtualinvoke $stack38.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponseWrapper(spark.http.matching.ResponseWrapper)>(responseWrapper), 120)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "$stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "121"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, $stack40 = virtualinvoke $stack39.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withResponse(spark.Response)>(response), 121)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod)",
"location": {
  "file": "",
  "class": "spark.http.matching.MatcherFilter",
  "method": "<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>",
  "line": "122"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, context = virtualinvoke $stack40.<spark.http.matching.RouteContext: spark.http.matching.RouteContext withHttpMethod(spark.route.HttpMethod)>(httpMethod), 122)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "context := @parameter0: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.BeforeFilters",
  "method": "<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "this := @this: spark.http.matching.RouteContext",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.Response response()>",
  "line": "-1"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.RouteContext: spark.Response response>",
"location": {
  "file": "",
  "class": "spark.http.matching.RouteContext",
  "method": "<spark.http.matching.RouteContext: spark.Response response()>",
  "line": "125"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>(context), 126)","(<spark.http.matching.BeforeFilters: void execute(spark.http.matching.RouteContext)>, $stack27 = virtualinvoke context.<spark.http.matching.RouteContext: spark.Response response()>(), 46)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "$stack1 = this.<spark.http.matching.ResponseWrapper: spark.Response delegate>",
"location": {
  "file": "",
  "class": "spark.http.matching.ResponseWrapper",
  "method": "<spark.http.matching.ResponseWrapper: spark.Response getDelegate()>",
  "line": "42"
},
"stackTrace": ["(<spark.http.matching.MatcherFilter: void doFilter(javax.servlet.ServletRequest,javax.servlet.ServletResponse,javax.servlet.FilterChain)>, staticinvoke <spark.http.matching.GeneralError: void modify(javax.servlet.http.HttpServletResponse,spark.http.matching.Body,spark.http.matching.RequestWrapper,spark.http.matching.ResponseWrapper,java.lang.Exception)>(httpResponse, body, requestWrapper, responseWrapper, generalException), 142)","(<spark.http.matching.GeneralError: void modify(javax.servlet.http.HttpServletResponse,spark.http.matching.Body,spark.http.matching.RequestWrapper,spark.http.matching.ResponseWrapper,java.lang.Exception)>, $stack9 = virtualinvoke responseWrapper.<spark.http.matching.ResponseWrapper: spark.Response getDelegate()>(), 44)"]
}]
}
}

]
