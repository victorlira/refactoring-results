[
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,interfaceinvoke cp.<java.util.List: boolean add(java.lang.Object)>($stack30),92,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, interfaceinvoke cp.<java.util.List: boolean add(java.lang.Object)>($stack30), 92)) SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,$stack9 = new java.util.ArrayList,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke $stack9.<java.util.ArrayList: void <init>()>(), 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,interfaceinvoke cp.<java.util.List: boolean add(java.lang.Object)>($stack30),92,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, interfaceinvoke cp.<java.util.List: boolean add(java.lang.Object)>($stack30), 92))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack9 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 92
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "cp = $stack9",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 92
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke cp.<java.util.List: boolean add(java.lang.Object)>($stack30)",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 92
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,virtualinvoke ret.<net.sf.launch4j.config.ClassPath: void setPaths(java.util.List)>(cp),97,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, virtualinvoke ret.<net.sf.launch4j.config.ClassPath: void setPaths(java.util.List)>(cp), 97)) SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,$stack9 = new java.util.ArrayList,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke $stack9.<java.util.ArrayList: void <init>()>(), 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,virtualinvoke ret.<net.sf.launch4j.config.ClassPath: void setPaths(java.util.List)>(cp),97,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, virtualinvoke ret.<net.sf.launch4j.config.ClassPath: void setPaths(java.util.List)>(cp), 97))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack9 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 97
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "cp = $stack9",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 97
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "virtualinvoke ret.<net.sf.launch4j.config.ClassPath: void setPaths(java.util.List)>(cp)",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 97
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>,cp := @parameter0: java.util.List,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39), 88)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>,interfaceinvoke cp.<java.util.List: boolean addAll(java.util.Collection)>($stack4),74,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39), 88) => (<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>, interfaceinvoke cp.<java.util.List: boolean addAll(java.util.Collection)>($stack4), 74)) SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,$stack9 = new java.util.ArrayList,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke $stack9.<java.util.ArrayList: void <init>()>(), 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>,cp := @parameter0: java.util.List,-1,SimpleNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39), 88)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>,interfaceinvoke cp.<java.util.List: boolean addAll(java.util.Collection)>($stack4),74,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39), 88) => (<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>, interfaceinvoke cp.<java.util.List: boolean addAll(java.util.Collection)>($stack4), 74))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack9 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>",
	"line": 74
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "cp = $stack9",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>",
	"line": -1
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>",
	"line": 74
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "interfaceinvoke cp.<java.util.List: boolean addAll(java.util.Collection)>($stack4)",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>",
					"line": 74
				}
			}
		]
	}
},
{
	"type": "CONFLUENCE",
	"label": "CF conflict",
	"body": {
		"description": "SOURCE=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack13),99,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack13), 99)) SINK=>BASE: Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,$stack9 = new java.util.ArrayList,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke $stack9.<java.util.ArrayList: void <init>()>(), 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,cp = $stack9,81,SourceNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)) => Node(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>,specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack13),99,SinkNode, path: (<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack13), 99))",
		"interference": [
			{
				"type": "source1",
				"branch": "L",
				"text": "$stack9 = new java.util.ArrayList",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 99
}]
			},
			{
				"type": "source2",
				"branch": "R",
				"text": "cp = $stack9",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 81
},{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
	"line": 99
}]
			},
			{
				"type": "confluence",
				"branch": "B",
				"text": "specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack13)",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
					"line": 99
				}
			}
		]
	}
}

,

{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> - ArrayList.<java.util.ArrayList: java.lang.Object[] elementData>",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null",
				"location": {
					"file": "",
					"class": "java.util.ArrayList",
					"method": "<init>",
					"line": -1
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "toL4j",
	"line": 81
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "ArrayList.<java.util.ArrayList: java.lang.Object[] elementData> = null",
				"location": {
					"file": "",
					"class": "java.util.ArrayList",
					"method": "<init>",
					"line": -1
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "toL4j",
	"line": 81
}]
			}
		]
	}
},
{
	"type": "OAINTER",
	"label": "OA conflict",
	"body": {
		"description": "cp - cp",
		"interference": [
			{
				"type": "declaration",
				"branch": "L",
				"text": "cp = $stack9",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "toL4j",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "toL4j",
	"line": 81
}]
			},
			{
				"type": "override",
				"branch": "R",
				"text": "cp = $stack9",
				"location": {
					"file": "",
					"class": "com.akathist.maven.plugins.launch4j.ClassPath",
					"method": "toL4j",
					"line": 81
				},
				"stackTrace": [{
	"class": "com.akathist.maven.plugins.launch4j.ClassPath",
	"method": "toL4j",
	"line": 81
}]
			}
		]
	}
}

,

{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cp = $stack9",
"location": {
  "file": "",
  "class": "com.akathist.maven.plugins.launch4j.ClassPath",
  "method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
  "line": "81"
},
"stackTrace": ["(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)"]
}, {
"type": "SimpleNode",
"branch":"",
"text": "cp := @parameter0: java.util.List",
"location": {
  "file": "",
  "class": "com.akathist.maven.plugins.launch4j.ClassPath",
  "method": "<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>",
  "line": "-1"
},
"stackTrace": ["(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39), 88)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "interfaceinvoke cp.<java.util.List: boolean addAll(java.util.Collection)>($stack4)",
"location": {
  "file": "",
  "class": "com.akathist.maven.plugins.launch4j.ClassPath",
  "method": "<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>",
  "line": "74"
},
"stackTrace": ["(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39), 88)","(<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>, interfaceinvoke cp.<java.util.List: boolean addAll(java.util.Collection)>($stack4), 74)"]
}]
}
},
{
"type": "CONFLICT",
"label": "SVFA conflict",
"body": {
  "description": "SVFA conflict",
  "interference": [{
"type": "SourceNode",
"branch":"",
"text": "cp = $stack9",
"location": {
  "file": "",
  "class": "com.akathist.maven.plugins.launch4j.ClassPath",
  "method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
  "line": "81"
},
"stackTrace": ["(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, cp = $stack9, 81)"]
}, {
"type": "SinkNode",
"branch":"",
"text": "specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39)",
"location": {
  "file": "",
  "class": "com.akathist.maven.plugins.launch4j.ClassPath",
  "method": "<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>",
  "line": "88"
},
"stackTrace": ["(<com.akathist.maven.plugins.launch4j.ClassPath: net.sf.launch4j.config.ClassPath toL4j(java.util.Set)>, specialinvoke this.<com.akathist.maven.plugins.launch4j.ClassPath: void addToCp(java.util.List,java.lang.String)>(cp, $stack39), 88)"]
}]
}
}

]
