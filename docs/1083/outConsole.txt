Running soot scenario assertj-assertions-generator;org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter;getNeededImportsFor(Class<?>);3bc2b65080edcb2c78376ccc90f9245e913f14aa
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,50300
Time to perform Confluence 1 Inter 1,24100
Configure Soot Confluence 2 Inter 0,13200
Time to perform Confluence 2 Inter 0,55300
Visited methods: 90
Depth limit: 5
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,62100
Runtime: 0.021s
Time to perform OA Inter 0,80200
OA Inter Visited methods: 29
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,39400
Time to perform DFP Inter 0,98800
Depth limit: 5
CONFLICTS: []
Visited methods: 45
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,56000
Time to perform DFP Inter 0,88200
Depth limit: 5
CONFLICTS: []
Visited methods: 45
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,52000
Time to perform PDG 0,58800
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/assertj-assertions-generator/3bc2b65080edcb2c78376ccc90f9245e913f14aa/original-without-dependencies/assertion-generator.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,52800
Time to perform PDG 0,62600
CONFLICTS: [List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(),112,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(), 112)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack53 == 0 goto interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),112,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack55 = virtualinvoke genericArrayType#7.<java.lang.Class: java.lang.Class getComponentType()>(),113,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack55 = virtualinvoke genericArrayType#7.<java.lang.Class: java.lang.Class getComponentType()>(), 113))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(),112,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(), 112)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack53 == 0 goto interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),112,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),115,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7), 115))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack57 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),105,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack57 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack58 = $stack57[0],105,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack58 = $stack57[0], 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack58,105,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack58, 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack59 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),106,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack59 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 106))), List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(),112,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(), 112)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack53 == 0 goto interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),112,SinkNode, path: ))]
 Analysis results
----------------------------
 Number of conflicts: 5
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
