List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(),112,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(), 112)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack53 == 0 goto interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),112,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack55 = virtualinvoke genericArrayType#7.<java.lang.Class: java.lang.Class getComponentType()>(),113,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack55 = virtualinvoke genericArrayType#7.<java.lang.Class: java.lang.Class getComponentType()>(), 113)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(),112,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(), 112)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack53 == 0 goto interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),112,SinkNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),115,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7), 115)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack57 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),105,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack57 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack58 = $stack57[0],105,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack58 = $stack57[0], 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType = (java.lang.reflect.GenericArrayType) $stack58,105,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType = (java.lang.reflect.GenericArrayType) $stack58, 105)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack59 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(),106,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack59 = interfaceinvoke genericArrayType.<java.lang.reflect.GenericArrayType: java.lang.reflect.Type getGenericComponentType()>(), 106)))

List(Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType),95,SourceNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack29 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isArray(java.lang.Class)>(propertyType), 95)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack29 == 0 goto $stack30 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: boolean isIterable(java.lang.Class)>(propertyType),95,SourceNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack30 == 0 goto $stack31 = virtualinvoke getter.<java.lang.reflect.Method: java.lang.reflect.Type getGenericReturnType()>(),98,SimpleNode, path: ) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,parameterizedType = (java.lang.reflect.ParameterizedType) $stack46,102,SimpleNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, parameterizedType = (java.lang.reflect.ParameterizedType) $stack46, 102)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack50 = interfaceinvoke parameterizedType.<java.lang.reflect.ParameterizedType: java.lang.reflect.Type[] getActualTypeArguments()>(), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack51 = $stack50[0],111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack51 = $stack50[0], 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51),111,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, genericArrayType#7 = staticinvoke <org.assertj.assertions.generator.util.ClassUtil: java.lang.Class getClass(java.lang.reflect.Type)>($stack51), 111)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,$stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(),112,SinkNode, path: (<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>, $stack53 = virtualinvoke genericArrayType#7.<java.lang.Class: boolean isArray()>(), 112)) => Node(<org.assertj.assertions.generator.description.converter.ClassToClassDescriptionConverter: java.util.Set getNeededImportsFor(java.lang.Class)>,if $stack53 == 0 goto interfaceinvoke classesToImport.<java.util.Set: boolean add(java.lang.Object)>(genericArrayType#7),112,SinkNode, path: ))

