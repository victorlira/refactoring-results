Running soot scenario datasift-java;org.datasift.tests.TestLiveApi;testValidate_Success();63473e61923aeb786325b6edf3828aa7538be0e6
Running ConflictDetectionAlgorithm{name='Confluence Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot Confluence 1 Inter 0,46900
Time to perform Confluence 1 Inter 1,35600
Configure Soot Confluence 2 Inter 0,18000
Time to perform Confluence 2 Inter 1,04400
Visited methods: 86
Depth limit: 5
CONFLICTS: [SOURCE=>BASE: Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,e1 = $stack12,44,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, e1 = $stack12, 44)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack15 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack15 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45))
SINK=>BASE: Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack5 = this.<org.datasift.tests.TestLiveApi: org.datasift.User user>,40,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack5 = this.<org.datasift.tests.TestLiveApi: org.datasift.User user>, 40)) => Node(<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>,user := @parameter0: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40)) => Node(<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>,user := @parameter0: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72)) => Node(<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>,this.<org.datasift.Definition: org.datasift.User _user> = user,85,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>, this.<org.datasift.Definition: org.datasift.User _user> = user, 85)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params),660,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack81 = virtualinvoke res.<org.datasift.ApiResponse: int getStatusCode()>(),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack81 = virtualinvoke res.<org.datasift.ApiResponse: int getStatusCode()>(), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack82 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack81),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack82 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack81), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack85 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack84),674,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack85 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack84), 674)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>(),674,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>(), 674)) => Node(<org.datasift.EAPIError: void <init>(java.lang.String)>,arg0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, specialinvoke tmp$2123396274.<org.datasift.EAPIError: void <init>(java.lang.String)>($stack76), 100)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack33 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)), SOURCE=>BASE: Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,e1 = $stack12,44,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, e1 = $stack12, 44)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack15 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack15 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45))
SINK=>BASE: Node(<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>,this.<org.datasift.Definition: org.datasift.User _user> = null,31,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>, this.<org.datasift.Definition: org.datasift.User _user> = null, 31)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params),660,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack81 = virtualinvoke res.<org.datasift.ApiResponse: int getStatusCode()>(),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack81 = virtualinvoke res.<org.datasift.ApiResponse: int getStatusCode()>(), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack82 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack81),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack82 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack81), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack85 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack84),674,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack85 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack84), 674)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>(),674,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>(), 674)) => Node(<org.datasift.EAPIError: void <init>(java.lang.String)>,arg0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, specialinvoke tmp$2123396274.<org.datasift.EAPIError: void <init>(java.lang.String)>($stack76), 100)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack33 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)), SOURCE=>BASE: Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,e1 = $stack12,44,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, e1 = $stack12, 44)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,l0 := @this: java.lang.Throwable,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack15 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack15 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45))
SINK=>BASE: Node(<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>,this.<org.datasift.Definition: org.datasift.User _user> = user,85,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>, this.<org.datasift.Definition: org.datasift.User _user> = user, 85)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params),660,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack81 = virtualinvoke res.<org.datasift.ApiResponse: int getStatusCode()>(),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack81 = virtualinvoke res.<org.datasift.ApiResponse: int getStatusCode()>(), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack82 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack81),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack82 = virtualinvoke $stack80.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($stack81), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" "),673,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack83 = virtualinvoke $stack82.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(' '), 673)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack85 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack84),674,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack85 = virtualinvoke $stack83.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack84), 674)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>(),674,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack86 = virtualinvoke $stack85.<java.lang.StringBuilder: java.lang.String toString()>(), 674)) => Node(<org.datasift.EAPIError: void <init>(java.lang.String)>,arg0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660) => (<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>, specialinvoke tmp$2123396274.<org.datasift.EAPIError: void <init>(java.lang.String)>($stack76), 100)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack33 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45))]
Confluence interference in <org.datasift.tests.TestLiveApi: void testValidate_Success()>
Confluence flows from execution of lines 44 and 40 to line 45, defined in e1 = $stack12 and $stack5 = this.<org.datasift.tests.TestLiveApi: org.datasift.User user> and used in $stack33 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>()
Caused by line 44 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, e1 = $stack12, 44)
Caused by line 40 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack5 = this.<org.datasift.tests.TestLiveApi: org.datasift.User user>, 40)
Caused by line 45 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack33 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)
 Analysis results
----------------------------
 Number of conflicts: 3
 Results exported to out.txt
Error getting the previous content of the JSON file out.json
 JSON Results exported to out.json
----------------------------
Running ConflictDetectionAlgorithm{name='OA Inter'}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Depth limit: 5
Configure Soot OA Inter 0,76000
Runtime: 0.026s
Time to perform OA Inter 0,93300
OA Inter Visited methods: 51
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,67800
Time to perform DFP Inter 1,18300
Depth limit: 5
CONFLICTS: []
Visited methods: 43
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = DFP-Inter}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot DFP Inter 0,43500
Time to perform DFP Inter 1,20500
Depth limit: 5
CONFLICTS: DF interference in <org.datasift.tests.TestLiveApi: void testValidate_Success()>
Data flows from execution of line 40 to 45, defined in this.<org.datasift.Definition: org.datasift.User _user> = null and propagated in $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>()
Caused by line 40 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>, this.<org.datasift.Definition: org.datasift.User _user> = null, 31)
Caused by line 45 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(), 45)
DF interference in <org.datasift.tests.TestLiveApi: void testValidate_Success()>
Data flows from execution of line 40 to 45, defined in def = $stack3 and propagated in $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>()
Caused by line 40 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, def = $stack3, 40)
Caused by line 45 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(), 45)
DF interference in <org.datasift.tests.TestLiveApi: void testValidate_Success()>
Data flows from execution of line 40 to 45, defined in this.<org.datasift.Definition: org.datasift.User _user> = user and propagated in $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>()
Caused by line 40 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>, this.<org.datasift.Definition: org.datasift.User _user> = user, 85)
Caused by line 45 flow: path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(), 45)
[List(Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,def = $stack3,40,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, def = $stack3, 40)) => Node(<org.datasift.Definition: void validate()>,this := @this: org.datasift.Definition,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params),660,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>,this := @this: org.datasift.ApiResponse,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack77 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 674)) => Node(<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>,$stack1 = this.<org.datasift.ApiResponse: java.lang.String _reason_phrase>,50,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack77 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 674)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack52 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack52 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 720)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack53 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack52),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack53 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack52), 720)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>(),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>(), 720)) => Node(<org.datasift.EAPIError: void <init>(java.lang.String,int)>,arg0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, specialinvoke $stack39.<org.datasift.EAPIError: void <init>(java.lang.String,int)>($stack40, $stack41), 687)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EInvalidData: "),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('EInvalidData: '), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack28 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack27),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack28 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack27), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(), 45))), List(Node(<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>,this.<org.datasift.Definition: org.datasift.User _user> = user,85,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>, this.<org.datasift.Definition: org.datasift.User _user> = user, 85)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params),660,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>,this := @this: org.datasift.ApiResponse,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack77 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 674)) => Node(<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>,$stack1 = this.<org.datasift.ApiResponse: java.lang.String _reason_phrase>,50,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack77 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 674)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack52 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack52 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 720)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack53 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack52),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack53 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack52), 720)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>(),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>(), 720)) => Node(<org.datasift.EAPIError: void <init>(java.lang.String,int)>,arg0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, specialinvoke $stack39.<org.datasift.EAPIError: void <init>(java.lang.String,int)>($stack40, $stack41), 687)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EInvalidData: "),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('EInvalidData: '), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack28 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack27),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack28 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack27), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(), 45))), List(Node(<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>,this.<org.datasift.Definition: org.datasift.User _user> = null,31,SourceNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, specialinvoke $stack3.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>($stack5, $stack4), 40) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String)>, specialinvoke this.<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>(user, csdl, ''), 72) => (<org.datasift.Definition: void <init>(org.datasift.User,java.lang.String,java.lang.String)>, this.<org.datasift.Definition: org.datasift.User _user> = null, 31)) => Node(<org.datasift.Definition: void validate()>,$stack10 = this.<org.datasift.Definition: org.datasift.User _user>,230,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, $stack10 = this.<org.datasift.Definition: org.datasift.User _user>, 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,this := @this: org.datasift.User,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>,660,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack8 = this.<org.datasift.User: org.datasift.ApiClient _api_client>, 660)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params),660,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, res = virtualinvoke $stack8.<org.datasift.ApiClient: org.datasift.ApiResponse call(java.lang.String,java.util.HashMap)>(endpoint, params), 660)) => Node(<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>,this := @this: org.datasift.ApiResponse,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack77 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 674)) => Node(<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>,$stack1 = this.<org.datasift.ApiResponse: java.lang.String _reason_phrase>,50,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack77 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 674)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack52 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack52 = virtualinvoke res.<org.datasift.ApiResponse: java.lang.String getReasonPhrase()>(), 720)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack53 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack52),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack53 = virtualinvoke $stack51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack52), 720)) => Node(<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>,$stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>(),720,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, $stack54 = virtualinvoke $stack53.<java.lang.StringBuilder: java.lang.String toString()>(), 720)) => Node(<org.datasift.EAPIError: void <init>(java.lang.String,int)>,arg0 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, virtualinvoke def.<org.datasift.Definition: void validate()>(), 49) => (<org.datasift.Definition: void validate()>, res = virtualinvoke $stack10.<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>('validate', params), 230) => (<org.datasift.User: org.json.JSONObject callAPI(java.lang.String,java.util.HashMap)>, specialinvoke $stack39.<org.datasift.EAPIError: void <init>(java.lang.String,int)>($stack40, $stack41), 687)) => Node(<java.lang.Exception: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l1 := @parameter0: java.lang.String,-1,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66)) => Node(<java.lang.Throwable: void <init>(java.lang.String)>,l0.<java.lang.Throwable: java.lang.String detailMessage> = l1,266,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack7 = virtualinvoke def.<org.datasift.Definition: java.lang.String get()>(), 42) => (<org.datasift.Definition: java.lang.String get()>, specialinvoke $stack3.<org.datasift.EInvalidData: void <init>(java.lang.String)>('CSDL not available'), 100) => (<org.datasift.EInvalidData: void <init>(java.lang.String)>, specialinvoke this.<java.lang.Exception: void <init>(java.lang.String)>(arg0), 27) => (<java.lang.Exception: void <init>(java.lang.String)>, specialinvoke l0.<java.lang.Throwable: void <init>(java.lang.String)>(l1), 66) => (<java.lang.Throwable: void <init>(java.lang.String)>, l0.<java.lang.Throwable: java.lang.String detailMessage> = l1, 266)) => Node(<java.lang.Throwable: java.lang.String getMessage()>,$stack1 = l0.<java.lang.Throwable: java.lang.String detailMessage>,377,SimpleNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack27 = virtualinvoke e1.<org.datasift.EInvalidData: java.lang.String getMessage()>(), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EInvalidData: "),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack26 = virtualinvoke $stack25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>('EInvalidData: '), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack28 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack27),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack28 = virtualinvoke $stack26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack27), 45)) => Node(<org.datasift.tests.TestLiveApi: void testValidate_Success()>,$stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(),45,SinkNode, path: (<org.datasift.tests.TestLiveApi: void testValidate_Success()>, $stack29 = virtualinvoke $stack28.<java.lang.StringBuilder: java.lang.String toString()>(), 45)))]
Visited methods: 43
 Analysis results
----------------------------
 Number of conflicts: 3
 Results exported to out.txt
 JSON Results exported to out.json
----------------------------
Running left right NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,57200
Time to perform PDG 0,56700
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
Running right left NonCommutativeConflictDetectionAlgorithm{name = PDG}
Using jar at /home/victorlira/Documents/experiment/miningframework/output/files/datasift-java/63473e61923aeb786325b6edf3828aa7538be0e6/original-without-dependencies/datasift-java-1.1.0-SNAPSHOT.jar
SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See https://www.slf4j.org/codes.html#noProviders for further details.
SLF4J: Class path contains SLF4J bindings targeting slf4j-api versions 1.7.x or earlier.
SLF4J: Ignoring binding found at [jar:file:/home/victorlira/Documents/experiment/miningframework/dependencies/soot-analysis-0.2.1-SNAPSHOT-jar-with-dependencies.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See https://www.slf4j.org/codes.html#ignoredBindings for an explanation.
Configure Soot PDG 0,64900
Time to perform PDG 0,52300
CONFLICTS: []
 Analysis results
----------------------------
 No conflicts detected
----------------------------
